// Autonomera777 Parser - Main JavaScript

let allData = [];
let filteredData = [];
let currentSessionId = null;
let statusCheckInterval = null;
let parsingStartTime = null;
let parsingTimerInterval = null;
let foundCount = 0; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
let isStopped = false; // –ë—ã–ª –ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–æ–≤
let regionsSortConfig = {
    column: 'region',
    direction: 'asc',
    data: [] // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º URL —Å–µ—Ä–≤–µ—Ä–∞
let serverUrl;
if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
    serverUrl = 'http://localhost:3000';
} else if (window.location.hostname.includes('amvera')) {
    serverUrl = window.location.protocol + '//' + window.location.host;
} else {
    serverUrl = 'https://parser-autonomera-production.up.railway.app';
}

console.log('üöó Server URL:', serverUrl);

async function startParsing() {
    const minPrice = parseInt(document.getElementById('minPrice').value) || 0;
    const maxPrice = parseInt(document.getElementById('maxPrice').value) || Infinity;
    const maxPages = 50;
    const delayMs = 1000;

    try {
        const healthCheck = await fetch(`${serverUrl}/api/health`);
        if (!healthCheck.ok) {
            showMessage('error', '‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Node.js —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ' + serverUrl);
            return;
        }
    } catch (error) {
        showMessage('error', '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node server.js');
        return;
    }

    document.getElementById('startBtn').disabled = true;
    document.getElementById('stopBtn').disabled = false;
    document.getElementById('exportBtn').disabled = true;
    document.getElementById('resumeBtn').disabled = true;
    document.getElementById('resumeBtn').style.display = 'none';
    document.getElementById('spinner').style.display = 'inline-block';
    document.getElementById('progressSection').classList.add('active');

    showMessage('info', 'üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...');
    // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å (–Ω–µ –∂–¥–µ–º –ø–µ—Ä–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞)
    document.getElementById('statusText').textContent = 'üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...';
    document.getElementById('sessionStatus').textContent = '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...';
    document.getElementById('parsingTimer').textContent = '00:00';
    document.getElementById('loadedCount').textContent = '0';
    foundCount = 0;
    document.getElementById('foundCount').textContent = '0';
    isStopped = false;
    console.log('üìä –°—á—ë—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: 0');
    startParsingTimer();

    try {
        const response = await fetch(`${serverUrl}/api/parse`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                minPrice,
                maxPrice: maxPrice === Infinity ? 999999999 : maxPrice,
                region: null,
                maxPages,
                delayMs
            })
        });

        const result = await response.json();
        currentSessionId = result.sessionId;

        console.log('Session ID:', currentSessionId);
        showMessage('success', '‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–∞—Ç. ID —Å–µ—Å—Å–∏–∏: ' + currentSessionId);

        monitorParsing();

    } catch (error) {
        showMessage('error', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        document.getElementById('startBtn').disabled = false;
        document.getElementById('spinner').style.display = 'none';
    }
}

async function monitorParsing() {
    if (!currentSessionId) return;

    statusCheckInterval = setInterval(async () => {
        try {
            const response = await fetch(`${serverUrl}/api/sessions/${currentSessionId}/status`);
            const status = await response.json();

            document.getElementById('sessionStatus').textContent = status.status;
            document.getElementById('loadedCount').textContent = status.listingsCount;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            foundCount = status.listingsCount;
            document.getElementById('foundCount').textContent = foundCount;

            // Debug logging
            console.log(`üìä –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${status.status}, –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${foundCount}`);

            if (status.status === 'completed') {
                clearInterval(statusCheckInterval);
                stopParsingTimer();
                // false - –∑–∞–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ (–ø–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ç–æ–≤–∞)
                await loadResults(false);
                showMessage('success', `‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ ${status.listingsCount} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
                document.getElementById('startBtn').disabled = false;
                document.getElementById('continueBtn').disabled = true;
                document.getElementById('continueBtn').style.display = 'none';
                document.getElementById('resumeBtn').disabled = true;
                document.getElementById('resumeBtn').style.display = 'none';
                document.getElementById('stopBtn').disabled = true;
                document.getElementById('exportBtn').disabled = false;
                document.getElementById('spinner').style.display = 'none';
            } else if (status.status === 'paused') {
                clearInterval(statusCheckInterval);
                stopParsingTimer();
                // –ü–µ—Ä–µ–¥–∞–µ–º true –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –±–∞—Ç—á–∞)
                await loadResults(true);
                showMessage('success', `‚úÖ –ë–∞—Ç—á ${status.batch.number || 1} –≥–æ—Ç–æ–≤! –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ ${status.listingsCount} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\nüëâ –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ç—á–∞`);
                document.getElementById('startBtn').disabled = true;
                document.getElementById('continueBtn').disabled = false;
                document.getElementById('continueBtn').style.display = 'inline-block';
                document.getElementById('resumeBtn').disabled = true;
                document.getElementById('resumeBtn').style.display = 'none';
                document.getElementById('stopBtn').disabled = false;
                document.getElementById('exportBtn').disabled = false;
                document.getElementById('spinner').style.display = 'none';
            } else if (status.status === 'stopped') {
                clearInterval(statusCheckInterval);
                stopParsingTimer();
                // true - –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–∏–ª, –º–æ–∂–µ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å)
                await loadResults(true);
                showMessage('success', `‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ ${status.listingsCount} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
                document.getElementById('startBtn').disabled = false;
                document.getElementById('continueBtn').disabled = true;
                document.getElementById('continueBtn').style.display = 'none';
                document.getElementById('stopBtn').disabled = true;
                document.getElementById('exportBtn').disabled = false;
                document.getElementById('spinner').style.display = 'none';
            } else if (status.status === 'error') {
                clearInterval(statusCheckInterval);
                stopParsingTimer();
                showMessage('error', `‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${status.error}`);
                document.getElementById('startBtn').disabled = false;
                document.getElementById('continueBtn').disabled = true;
                document.getElementById('continueBtn').style.display = 'none';
                document.getElementById('stopBtn').disabled = true;
                document.getElementById('spinner').style.display = 'none';
            }

            updateLastUpdate();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', error);
        }
    }, 500);
}

async function loadResults(isAppend = false) {
    if (!currentSessionId) {
        console.log('‚ùå Session ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        return;
    }

    try {
        console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å–µ—Å—Å–∏–∏:', currentSessionId);
        const response = await fetch(`${serverUrl}/api/sessions/${currentSessionId}/data`);
        console.log('üìä –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status);

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`);
        }

        const result = await response.json();
        console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);

        const newListings = result.listings || [];

        // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –±–∞—Ç—á–∞ - –î–û–ë–ê–í–õ–Ø–ï–ú –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º
        // –ò–Ω–∞—á–µ - –ó–ê–ú–ï–ù–Ø–ï–ú –¥–∞–Ω–Ω—ã–µ
        if (isAppend && allData.length > 0) {
            console.log(`üìä –î–æ–±–∞–≤–ª—è–µ–º ${newListings.length} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ${allData.length}`);
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ ID
            const existingIds = new Set(allData.map(item => item.id));
            const newItems = newListings.filter(item => !existingIds.has(item.id));
            allData = [...allData, ...newItems];
        } else {
            console.log(`üìä –ó–∞–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ: ${newListings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            allData = newListings;
        }

        filteredData = [...allData];
        foundCount = allData.length;
        document.getElementById('foundCount').textContent = foundCount;

        console.log(`‚úÖ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ ${allData.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);

        displayResults();
        updateStats();

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
        showMessage('error', `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`);
    }
}

async function continueParsing() {
    if (!currentSessionId) return;

    document.getElementById('continueBtn').disabled = true;
    document.getElementById('spinnerContinue').style.display = 'inline-block';

    try {
        const response = await fetch(`${serverUrl}/api/sessions/${currentSessionId}/continue`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const result = await response.json();
        console.log('Continue response:', result);

        showMessage('info', `‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ç—á–∞... –¢–µ–∫—É—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${result.currentCount}`);

        document.getElementById('spinnerContinue').style.display = 'none';
        document.getElementById('spinner').style.display = 'inline-block';
        document.getElementById('startBtn').disabled = true;
        document.getElementById('continueBtn').style.display = 'none';

        // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç—Å—á–µ—Ç (–Ω–µ –æ—á–∏—â–∞–µ–º parsingStartTime)
        // startParsingTimer(); // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∞–π–º–µ—Ä

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
        if (statusCheckInterval) {
            clearInterval(statusCheckInterval);
        }

        monitorParsing();

    } catch (error) {
        showMessage('error', `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏: ${error.message}`);
        document.getElementById('continueBtn').disabled = false;
        document.getElementById('spinnerContinue').style.display = 'none';
    }
}

async function stopParsing() {
    if (statusCheckInterval) {
        clearInterval(statusCheckInterval);
    }
    stopParsingTimer();
    document.getElementById('stopBtn').disabled = true;

    if (!currentSessionId) {
        showMessage('error', '‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }

    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch(`${serverUrl}/api/sessions/${currentSessionId}/stop`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const result = await response.json();

        if (!response.ok) {
            showMessage('error', `‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ${result.error}`);
            return;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        await loadResults();
        showMessage('success', `‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –°–æ–±—Ä–∞–Ω–æ ${result.listingsCount} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);

        isStopped = true;
        document.getElementById('startBtn').disabled = false;
        document.getElementById('continueBtn').disabled = true;
        document.getElementById('continueBtn').style.display = 'none';
        document.getElementById('resumeBtn').disabled = false;
        document.getElementById('resumeBtn').style.display = 'inline-block';
        document.getElementById('exportBtn').disabled = false;
        document.getElementById('spinner').style.display = 'none';
    } catch (error) {
        showMessage('error', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
function startParsingTimer() {
    parsingStartTime = Date.now();
    updateParsingTimer();

    if (parsingTimerInterval) {
        clearInterval(parsingTimerInterval);
    }

    parsingTimerInterval = setInterval(updateParsingTimer, 1000);
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
function updateParsingTimer() {
    if (!parsingStartTime) return;

    const elapsed = Math.floor((Date.now() - parsingStartTime) / 1000);
    const minutes = Math.floor(elapsed / 60);
    const seconds = elapsed % 60;

    const timeString = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
    document.getElementById('parsingTimer').textContent = timeString;
}

/**
 * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
function stopParsingTimer() {
    if (parsingTimerInterval) {
        clearInterval(parsingTimerInterval);
        parsingTimerInterval = null;
    }
    parsingStartTime = null;
}

function showMessage(type, message) {
    const container = document.getElementById('statusMessage');
    container.innerHTML = `<div class="status-message ${type}">${message}</div>`;
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
let sortConfig = {
    column: 'datePosted',
    direction: 'desc' // 'asc' –∏–ª–∏ 'desc'
};

function displayResults() {
    const tableContainer = document.getElementById('tableContainer');

    if (filteredData.length === 0) {
        tableContainer.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">üîç</div>
                <h3>–û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏</p>
            </div>
        `;
        return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const sortedData = [...filteredData].sort((a, b) => {
        let aVal = a[sortConfig.column];
        let bVal = b[sortConfig.column];

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ü–µ–Ω—ã (—á–∏—Å–ª–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ)
        if (sortConfig.column === 'price') {
            aVal = Number(aVal) || 0;
            bVal = Number(bVal) || 0;
        }

        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
        if (aVal < bVal) return sortConfig.direction === 'asc' ? -1 : 1;
        if (aVal > bVal) return sortConfig.direction === 'asc' ? 1 : -1;
        return 0;
    });

    let rows = '';
    for (const item of sortedData) {
        const statusClass = item.status === '–∞–∫—Ç–∏–≤–Ω–æ' ? 'status-active' : 'status-inactive';
        rows += `
            <tr>
                <td><a href="${item.url}" class="number-link" target="_blank">${item.number}</a></td>
                <td class="price">‚ÇΩ${item.price.toLocaleString('ru-RU')}</td>
                <td>${item.datePosted}</td>
                <td>${item.dateUpdated}</td>
                <td><span class="status-badge ${statusClass}">${item.status}</span></td>
                <td>${item.region}</td>
                <td><a href="${item.url}" class="number-link" target="_blank">–ü–µ—Ä–µ–π—Ç–∏</a></td>
            </tr>
        `;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–∫–∞–∫ –≤ Excel)
    const getHeaderHTML = (columnName, displayName) => {
        const indicator = sortConfig.column === columnName
            ? (sortConfig.direction === 'asc' ? ' ‚ñ≤' : ' ‚ñº')
            : '';
        return `<th class="sortable-header" onclick="sortTable('${columnName}')">${displayName}${indicator}</th>`;
    };

    tableContainer.innerHTML = `
        <table>
            <thead>
                <tr class="header-row">
                    ${getHeaderHTML('number', '–ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è')}
                    ${getHeaderHTML('price', '–¶–µ–Ω–∞')}
                    ${getHeaderHTML('datePosted', '–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è')}
                    ${getHeaderHTML('dateUpdated', '–î–∞—Ç–∞ –ø–æ–¥–Ω—è—Ç–∏—è')}
                    ${getHeaderHTML('status', '–°—Ç–∞—Ç—É—Å')}
                    ${getHeaderHTML('region', '–†–µ–≥–∏–æ–Ω')}
                    ${getHeaderHTML('url', '–°—Å—ã–ª–∫–∞')}
                </tr>
            </thead>
            <tbody>${rows}</tbody>
        </table>
    `;
}

/**
 * –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
 */
function sortTable(columnName) {
    if (sortConfig.column === columnName) {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        sortConfig.direction = sortConfig.direction === 'asc' ? 'desc' : 'asc';
    } else {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        sortConfig.column = columnName;
        sortConfig.direction = 'asc';
    }
    displayResults();
}

/**
 * –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–≥–∏–æ–Ω–æ–≤
 */
function sortRegionsTable(columnName) {
    if (regionsSortConfig.column === columnName) {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        regionsSortConfig.direction = regionsSortConfig.direction === 'asc' ? 'desc' : 'asc';
    } else {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        regionsSortConfig.column = columnName;
        regionsSortConfig.direction = 'asc';
    }
    renderRegionsTable();
}

/**
 * –û—Ç—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
 */
function renderRegionsTable() {
    // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    let sortedData = [...regionsSortConfig.data];

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    sortedData.sort((a, b) => {
        let aValue = a[regionsSortConfig.column];
        let bValue = b[regionsSortConfig.column];

        // –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if (typeof aValue === 'number' && typeof bValue === 'number') {
            return regionsSortConfig.direction === 'asc' ? aValue - bValue : bValue - aValue;
        }

        // –î–ª—è —Å—Ç—Ä–æ–∫
        if (typeof aValue === 'string' && typeof bValue === 'string') {
            return regionsSortConfig.direction === 'asc'
                ? aValue.localeCompare(bValue, 'ru')
                : bValue.localeCompare(aValue, 'ru');
        }

        return 0;
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    document.getElementById('regionSort').textContent = regionsSortConfig.column === 'region'
        ? (regionsSortConfig.direction === 'asc' ? '‚ñ≤' : '‚ñº')
        : '';
    document.getElementById('countSort').textContent = regionsSortConfig.column === 'count'
        ? (regionsSortConfig.direction === 'asc' ? '‚ñ≤' : '‚ñº')
        : '';
    document.getElementById('avgPriceSort').textContent = regionsSortConfig.column === 'avgPrice'
        ? (regionsSortConfig.direction === 'asc' ? '‚ñ≤' : '‚ñº')
        : '';

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    let regionRows = '';
    for (const regionData of sortedData) {
        regionRows += `
            <tr>
                <td><a href="#" class="region-link" onclick="filterByRegion('${regionData.region}'); return false;">üìç ${regionData.region}</a></td>
                <td>${regionData.count}</td>
                <td>‚ÇΩ${regionData.avgPrice.toLocaleString('ru-RU')}</td>
            </tr>
        `;
    }

    document.getElementById('regionsBody').innerHTML = regionRows || '<tr><td colspan="3" style="text-align: center; color: #999;">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</td></tr>';
}

async function updateStats() {
    if (!currentSessionId || allData.length === 0) return;

    try {
        const response = await fetch(`${serverUrl}/api/stats/${currentSessionId}`);
        const stats = await response.json();

        document.getElementById('totalCount').textContent = stats.totalListings;
        document.getElementById('avgPrice').textContent = stats.stats.avgPriceFormatted;
        document.getElementById('minPriceResult').textContent = '‚ÇΩ' + stats.minPrice.toLocaleString('ru-RU');
        document.getElementById('maxPriceResult').textContent = '‚ÇΩ' + stats.maxPrice.toLocaleString('ru-RU');
        document.getElementById('uniqueRegions').textContent = stats.uniqueRegions;
        document.getElementById('uniqueSellers').textContent = stats.uniqueSellers;

        if (stats.regions && stats.regions.length > 0) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            regionsSortConfig.data = stats.regions.map(region => {
                const regionListings = allData.filter(l => l.region === region);
                const avgPrice = regionListings.length > 0
                    ? Math.round(regionListings.reduce((a, b) => a + b.price, 0) / regionListings.length)
                    : 0;
                return {
                    region: region,
                    count: regionListings.length,
                    avgPrice: avgPrice
                };
            });

            // –û—Ç—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
            renderRegionsTable();
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

function applyFilters() {
    const searchQuery = document.getElementById('searchFilter').value.toLowerCase();
    const statusFilter = document.getElementById('statusFilter').value;

    filteredData = allData.filter(item => {
        const matchesSearch = !searchQuery ||
            (item.number && item.number.toLowerCase().includes(searchQuery)) ||
            (item.region && item.region.toLowerCase().includes(searchQuery));

        const matchesStatus = !statusFilter || item.status === statusFilter;

        return matchesSearch && matchesStatus;
    });

    displayResults();
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä—è–º–æ –≤ —Ç–∞–±–ª–∏—Ü–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
function resetFilters() {
    document.getElementById('searchFilter').value = '';
    document.getElementById('statusFilter').value = '';
    filteredData = [...allData];
    displayResults();
}

/**
 * –§–∏–ª—å—Ç—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–µ–≥–∏–æ–Ω—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–î–∞–Ω–Ω—ã–µ"
 */
function filterByRegion(region) {
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    document.getElementById('searchFilter').value = '';
    document.getElementById('statusFilter').value = '';

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–≥–∏–æ–Ω—É
    filteredData = allData.filter(item => item.region === region);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    displayResults();

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–î–∞–Ω–Ω—ã–µ"
    switchTab('data');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    showMessage('info', `üîç –ü–æ–∫–∞–∑–∞–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–≥–∏–æ–Ω–∞: ${region} (${filteredData.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π)`);
}

async function exportData() {
    if (!currentSessionId || allData.length === 0) {
        showMessage('error', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
        return;
    }

    const xlsxUrl = `${serverUrl}/api/sessions/${currentSessionId}/export?format=xlsx`;
    const link = document.createElement('a');
    link.href = xlsxUrl;
    link.download = `autonomera777_${new Date().toISOString().split('T')[0]}.xlsx`;
    link.click();

    showMessage('success', `‚úÖ Excel —Ñ–∞–π–ª —Å ${allData.length} –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω`);
}

function switchTab(tabName) {
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
    });

    document.getElementById(tabName).classList.add('active');
    event.target.classList.add('active');
}

function updateLastUpdate() {
    const now = new Date();
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    document.getElementById('lastUpdate').textContent = `${hours}:${minutes}`;
}

/**
 * –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
 */
async function resumeParsing() {
    if (!currentSessionId) {
        showMessage('error', '‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }

    document.getElementById('resumeBtn').disabled = true;
    document.getElementById('spinnerResume').style.display = 'inline-block';
    document.getElementById('stopBtn').disabled = false;
    document.getElementById('startBtn').disabled = true;

    try {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–Ω–æ–≤–æ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        parsingStartTime = null;
        startParsingTimer();

        const response = await fetch(`${serverUrl}/api/sessions/${currentSessionId}/resume`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const result = await response.json();
        console.log('Resume response:', result);

        if (!response.ok) {
            showMessage('error', `‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${result.error}`);
            document.getElementById('resumeBtn').disabled = false;
            document.getElementById('spinnerResume').style.display = 'none';
            return;
        }

        showMessage('info', `‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏... –¢–µ–∫—É—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${result.currentCount}`);

        document.getElementById('spinnerResume').style.display = 'none';
        document.getElementById('spinner').style.display = 'inline-block';
        document.getElementById('resumeBtn').style.display = 'none';
        isStopped = false;

        monitorParsing();

    } catch (error) {
        showMessage('error', `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏: ${error.message}`);
        document.getElementById('resumeBtn').disabled = false;
        document.getElementById('spinnerResume').style.display = 'none';
    }
}
window.addEventListener('load', () => {
    console.log('üöó –ü–∞—Ä—Å–µ—Ä –ê–í–¢–û–ù–û–ú–ï–†–ê777 –≥–æ—Ç–æ–≤');
});
