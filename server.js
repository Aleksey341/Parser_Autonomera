// –í–ê–ñ–ù–û: –∑–∞–≥—Ä—É–∑–∏—Ç—å .env –ü–ï–†–ï–î –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º!
require('dotenv').config();

const express = require('express');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const cron = require('node-cron');
const { stringify } = require('csv-stringify/sync');
const XLSX = require('xlsx');
const AutonomeraParser = require('./parser');

// –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥—É–ª—å –ë–î –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:
// 1. PostgreSQL –µ—Å–ª–∏ DATABASE_URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
// 2. SQLite –∫–∞–∫ fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
let db;
if (process.env.DATABASE_URL) {
  db = require('./db-pg');
} else if (process.env.DB_TYPE === 'sqlite') {
  db = require('./db-sqlite');
} else {
  db = require('./db');  // MySQL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

const { runParserWithDB, runDifferentialParserWithDB, ParserDBAdapter, loadFromOfflineStorage } = require('./parser-db');
const { getScheduler } = require('./scheduler');
const apiDbRoutes = require('./api-db-routes');

const app = express();
const PORT = Number(process.env.PORT) || 3000;

// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏ –¥–ª—è Puppeteer
process.setMaxListeners(0);

// Middleware
app.use(cors());
app.use(express.json());

// Trust proxy - –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Amvera –∏ –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞—Ç–Ω—ã–º–∏ –ø—Ä–æ–∫—Å–∏
app.set('trust proxy', 1);

// –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ (CSS, JS –∏ —Ç.–¥.)
app.use(express.static(path.join(__dirname, 'public')));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
app.use((req, res, next) => {
  console.log(`üì® ${req.method} ${req.path}`);
  next();
});

// –ù–µ —à—É–º–∏–º favicon
app.get('/favicon.ico', (req, res) => res.sendStatus(204));

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
app.use('/api', apiDbRoutes);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞
const sessions = new Map();

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
 */
function generateSessionId() {
    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}

/**
 * GET /api/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
 */
app.get('/api/health', (req, res) => {
    res.json({
        status: 'ok',
        timestamp: new Date().toISOString(),
        activeSessions: sessions.size
    });
});

/**
 * POST /api/parse - –Ω–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º: demo (–∑–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON) –∏–ª–∏ live (—Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥)
 */
app.post('/api/parse', async (req, res) => {
    const {
        minPrice = 0,
        maxPrice = Infinity,
        region = null,
        maxPages = 200,
        delayMs = 100,
        concurrentRequests = 500,
        requestDelayMs = 50,
        mode = 'live' // 'live' - —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥, 'demo' - –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ JSON
    } = req.body;

    const sessionId = generateSessionId();

    console.log(`\nüöÄ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞: ${sessionId}`);
    console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: —Ü–µ–Ω–∞ ${minPrice}-${maxPrice}, —Ä–µ–≥–∏–æ–Ω: ${region}`);
    console.log(`‚ö° DEBUG MODE VALUE: "${mode}" (type: ${typeof mode})`);
    console.log(`‚ö° –†–µ–∂–∏–º: ${mode === 'demo' ? '–î–ï–ú–û (–∑–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)' : 'LIVE (—Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥)'}`);

    const parser = new AutonomeraParser({
        minPrice,
        maxPrice,
        region,
        maxPages,
        delayMs,
        concurrentRequests,
        requestDelayMs
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—Å–µ—Ä –≤ —Å–µ—Å—Å–∏—é
    sessions.set(sessionId, {
        parser,
        status: 'running',
        progress: 0,
        startTime: Date.now(),
        error: null
    });

    res.json({
        sessionId,
        status: 'started',
        message: `–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–∞–ª—Å—è (—Ä–µ–∂–∏–º: ${mode})`
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    (async () => {
        try {
            const session = sessions.get(sessionId);
            if (!session) return;

            let result;

            // –†–µ–∂–∏–º DEMO: –∑–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
            if (mode === 'demo') {
                console.log(`üìÇ –†–µ–∂–∏–º DEMO: –∑–∞–≥—Ä—É–∂–∞—é –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...`);
                try {
                    const importedData = require('./imported_listings.json');
                    parser.listings = importedData;
                    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${importedData.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ JSON`);
                    result = { paused: false };
                } catch (err) {
                    console.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª imported_listings.json, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫`);
                    parser.listings = [];
                    result = { paused: false };
                }
            } else {
                // –†–µ–∂–∏–º LIVE: —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞
                result = await parser.parse();
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (—Å fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
            const savedData = await runParserWithDB(parser, sessionId);

            let allListings = [];
            let dbAvailable = true;

            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ë–î, –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            try {
                console.log(`üì• –ó–∞–≥—Ä—É–∂–∞—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –ë–î...`);
                allListings = await db.getListings({
                    minPrice: minPrice === 0 ? 0 : minPrice,
                    maxPrice: maxPrice === Infinity ? 999999999 : maxPrice,
                    limit: 100000 // –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ
                });
            } catch (dbError) {
                console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ë–î: ${dbError.message}`);
                dbAvailable = false;

                // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                const offlineData = loadFromOfflineStorage();
                if (offlineData) {
                    console.log(`üìÇ –ò—Å–ø–æ–ª—å–∑—É—é –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞`);
                    allListings = offlineData;
                } else if (parser.listings) {
                    console.log(`üìã –ò—Å–ø–æ–ª—å–∑—É—é —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ`);
                    allListings = parser.listings;
                }
            }

            session.status = 'completed';
            session.listings = allListings;
            session.dbInfo = {
                totalInDB: allListings.length,
                parsedThisTime: parser.listings ? parser.listings.length : 0,
                savedData: savedData,
                dbAvailable: dbAvailable,
                savedLocally: savedData?.savedLocally || false
            };
            session.endTime = Date.now();
            session.progress = 100;

            console.log(`‚úÖ –°–µ—Å—Å–∏—è ${sessionId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`);
            console.log(`   - –°–ø–∞—Ä—Å–µ–Ω–æ: ${(parser.listings || result).length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            console.log(`   - –í—Å–µ–≥–æ –¥–∞–Ω–Ω—ã—Ö: ${allListings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            console.log(`   - –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞: ${dbAvailable ? '–î–ê' : '–ù–ï–¢'}`);
            if (savedData?.savedLocally) {
                console.log(`   - –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ`);
            }

        } catch (error) {
            const session = sessions.get(sessionId);
            if (session) {
                session.status = 'error';
                session.error = error.message;
                session.endTime = Date.now();

                // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                try {
                    const offlineData = loadFromOfflineStorage();
                    if (offlineData) {
                        console.log(`üìÇ –ò—Å–ø–æ–ª—å–∑—É—é –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏`);
                        session.status = 'completed_with_offline_data';
                        session.listings = offlineData;
                    }
                } catch (localError) {
                    console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${localError.message}`);
                }
            }
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ ${sessionId}:`, error.message);
        }
    })();
});

/**
 * POST /api/parse-differential - –Ω–∞—á–∞–ª–æ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
 * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
 */
app.post('/api/parse-differential', async (req, res) => {
    const {
        minPrice = 0,
        maxPrice = Infinity,
        region = null,
        maxPages = 200,
        delayMs = 100,
        concurrentRequests = 500,
        requestDelayMs = 50
    } = req.body;

    const sessionId = generateSessionId();

    console.log(`\nüîÑ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${sessionId}`);
    console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: —Ü–µ–Ω–∞ ${minPrice}-${maxPrice}, —Ä–µ–≥–∏–æ–Ω: ${region}`);

    const parser = new AutonomeraParser({
        minPrice,
        maxPrice,
        region,
        maxPages,
        delayMs,
        concurrentRequests,
        requestDelayMs
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—Å–µ—Ä –≤ —Å–µ—Å—Å–∏—é
    sessions.set(sessionId, {
        parser,
        status: 'running',
        progress: 0,
        startTime: Date.now(),
        error: null,
        isDifferential: true
    });

    res.json({
        sessionId,
        status: 'started',
        message: '–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–∞–ª—Å—è'
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    runDifferentialParserWithDB(parser, sessionId)
        .then((result) => {
            const session = sessions.get(sessionId);
            if (session) {
                session.status = 'completed';
                session.listings = result.newListings || [];
                session.priceChanges = result.priceChanges || [];
                session.diffResult = result;
                session.endTime = Date.now();
                session.progress = 100;
                console.log(`‚úÖ –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è ${sessionId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`);
                console.log(`   - –í—Å–µ–≥–æ —Å–ø–∞—Ä—Å–µ–Ω–æ: ${result.totalParsed}`);
                console.log(`   - –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${result.newItems}`);
                console.log(`   - –ò–∑–º–µ–Ω–µ–Ω—ã —Ü–µ–Ω—ã: ${result.updatedItems}`);
                console.log(`   - –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${result.unchangedItems}`);
            }
        })
        .catch((error) => {
            const session = sessions.get(sessionId);
            if (session) {
                session.status = 'error';
                session.error = error.message;
                session.endTime = Date.now();
            }
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏ ${sessionId}:`, error.message);
        });
});

/**
 * GET /api/sessions/:sessionId/status - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
app.get('/api/sessions/:sessionId/status', (req, res) => {
    const { sessionId } = req.params;
    const session = sessions.get(sessionId);

    if (!session) {
        return res.status(404).json({
            error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
    }

    const duration = session.endTime
        ? Math.round((session.endTime - session.startTime) / 1000)
        : Math.round((Date.now() - session.startTime) / 1000);

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    const listings = session.listings || (session.parser && session.parser.listings) || [];
    const listingsCount = listings.length;

    const response = {
        sessionId,
        status: session.status,
        progress: session.progress,
        listingsCount: listingsCount,
        startTime: new Date(session.startTime).toISOString(),
        duration: `${duration}s`,
        error: session.error,
        isDifferential: session.isDifferential || false
    };

    // –ï—Å–ª–∏ —ç—Ç–æ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if (session.isDifferential && session.diffResult) {
        response.differential = {
            totalParsed: session.diffResult.totalParsed,
            newItems: session.diffResult.newItems,
            updatedItems: session.diffResult.updatedItems,
            unchangedItems: session.diffResult.unchangedItems,
            priceChangesCount: (session.priceChanges || []).length
        };
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞—Ç—á–∞—Ö –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if (session.status === 'paused') {
        response.batch = {
            number: session.batchNumber || 1,
            itemsPerBatch: 500,
            nextUrl: `/api/sessions/${sessionId}/continue`,
            message: 'üëâ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞',
            instruction: `POST http://localhost:3000/api/sessions/${sessionId}/continue`
        };
    }

    res.json(response);
});

/**
 * GET /api/sessions/:sessionId/data - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
app.get('/api/sessions/:sessionId/data', (req, res) => {
    const { sessionId } = req.params;
    const session = sessions.get(sessionId);

    if (!session) {
        return res.status(404).json({
            error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
    }

    if (!session.listings) {
        return res.status(400).json({
            error: '–ü–∞—Ä—Å–∏–Ω–≥ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω'
        });
    }

    const response = {
        sessionId,
        isDifferential: session.isDifferential || false,
        count: session.listings.length,
        listings: session.listings
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë–î –µ—Å–ª–∏ –µ—Å—Ç—å
    if (session.dbInfo) {
        response.database = {
            totalListingsInDB: session.dbInfo.totalInDB,
            parsedThisTime: session.dbInfo.parsedThisTime,
            saveResult: session.dbInfo.savedData
        };
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω
    if (session.isDifferential && session.priceChanges) {
        response.priceChanges = session.priceChanges;
        response.priceChangesCount = session.priceChanges.length;

        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —Ü–µ–Ω
        const increased = session.priceChanges.filter(p => p.changeDirection === 'increased').length;
        const decreased = session.priceChanges.filter(p => p.changeDirection === 'decreased').length;
        response.priceChangesSummary = {
            total: session.priceChanges.length,
            increased,
            decreased,
            totalPriceDelta: session.priceChanges.reduce((sum, p) => sum + (p.priceDelta || 0), 0)
        };
    }

    res.json(response);
});

/**
 * GET /api/sessions/:sessionId/export - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV
 */
app.get('/api/sessions/:sessionId/export', (req, res) => {
    const { sessionId } = req.params;
    const { format = 'csv' } = req.query;
    const session = sessions.get(sessionId);

    if (!session) {
        return res.status(404).json({
            error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
    }

    if (!session.listings || session.listings.length === 0) {
        return res.status(400).json({
            error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞'
        });
    }

    if (format === 'json') {
        const filename = `autonomera777_${new Date().toISOString().split('T')[0]}.json`;
        res.setHeader('Content-Type', 'application/json; charset=utf-8');
        res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        res.send(JSON.stringify(session.listings, null, 2));
    } else if (format === 'xlsx' || format === 'excel') {
        // Excel XLSX —Ñ–æ—Ä–º–∞—Ç —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º URL
        const headers = ['–ù–æ–º–µ—Ä', '–¶–µ–Ω–∞', '–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è', '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', '–°—Ç–∞—Ç—É—Å', '–†–µ–≥–∏–æ–Ω', 'URL'];
        const rows = session.listings.map(item => [
            item.number || '',
            item.price || '',
            item.datePosted || '',
            item.dateUpdated || '',
            item.status || '',
            item.region || '',
            item.url || ''
        ]);

        // –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É —Å –¥–∞–Ω–Ω—ã–º–∏
        const ws_data = [headers, ...rows];
        const ws = XLSX.utils.aoa_to_sheet(ws_data);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, '–û–±—ä—è–≤–ª–µ–Ω–∏—è');

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–ø–∫–∏ (—Å–µ—Ä—ã–π —Ñ–æ–Ω)
        const headerStyle = {
            fill: { fgColor: { rgb: 'FFD3D3D3' } }, // –°–µ—Ä—ã–π —Ü–≤–µ—Ç
            font: { bold: true, color: { rgb: 'FF000000' } }, // –ß–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
            alignment: { horizontal: 'center', vertical: 'center', wrapText: true }
        };

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
        for (let i = 0; i < headers.length; i++) {
            const cellRef = XLSX.utils.encode_cell({ r: 0, c: i });
            if (ws[cellRef]) {
                ws[cellRef].s = headerStyle;
            }
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–ª–æ–Ω–æ–∫
        const colWidths = [];
        for (let i = 0; i < headers.length; i++) {
            let maxWidth = headers[i] ? headers[i].toString().length : 0;
            rows.forEach(row => {
                const cellValue = row[i] ? String(row[i]).length : 0;
                if (cellValue > maxWidth) maxWidth = cellValue;
            });
            colWidths.push({ wch: Math.min(maxWidth + 2, 60) }); // +2 –¥–ª—è –ø–∞–¥–¥–∏–Ω–≥–∞, –º–∞–∫—Å 60
        }
        ws['!cols'] = colWidths;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫
        ws['!rows'] = [{ hpx: 25 }]; // –í—ã—Å–æ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞

        const filename = `autonomera777_${new Date().toISOString().split('T')[0]}.xlsx`;
        const filepath = path.join(process.cwd(), filename);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º XLSX —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        try {
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
            XLSX.writeFile(wb, filepath);

            console.log(`üìä XLSX —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${filepath}`);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet; charset=utf-8');
            res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
            res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
            res.setHeader('Pragma', 'no-cache');
            res.setHeader('Expires', '0');

            res.download(filepath, filename, (err) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', err);
                } else {
                    console.log(`‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${filename}`);
                }

                // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                setTimeout(() => {
                    fs.unlink(filepath, (unlinkErr) => {
                        if (!unlinkErr) {
                            console.log(`üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: ${filepath}`);
                        }
                    });
                }, 1000);
            });
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è XLSX —Ñ–∞–π–ª–∞:', err);
            res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: ' + err.message });
        }
    } else {
        // CSV –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∏—Å–ø–æ–ª—å–∑—É–µ–º csv-stringify –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const headers = ['–ù–æ–º–µ—Ä', '–¶–µ–Ω–∞', '–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è', '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', '–°—Ç–∞—Ç—É—Å', '–†–µ–≥–∏–æ–Ω'];
        const rows = session.listings.map(item => [
            item.number || '',
            item.price || '',
            item.datePosted || '',
            item.dateUpdated || '',
            item.status || '',
            item.region || ''
        ]);

        // –î–æ–±–∞–≤–ª—è–µ–º header –≤ –Ω–∞—á–∞–ª–æ
        const dataToExport = [headers, ...rows];

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º csv-stringify –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
        const csvContent = stringify(dataToExport, {
            delimiter: ',',
            quoted: true,
            quoted_string: true,
            escape: '"',
            encoding: 'utf8'
        });

        const filename = `autonomera777_${new Date().toISOString().split('T')[0]}.csv`;
        const filepath = path.join(process.cwd(), filename);

        // –î–æ–±–∞–≤–ª—è–µ–º BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
        const bom = Buffer.from('\ufeff', 'utf8');
        const content = Buffer.concat([bom, Buffer.from(csvContent, 'utf8')]);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        fs.writeFileSync(filepath, content);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        res.setHeader('Content-Type', 'text/csv; charset=utf-8');
        res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        res.download(filepath, filename, (err) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', err);
            }
        });
    }
});

/**
 * DELETE /api/sessions/:sessionId - —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
 */
app.delete('/api/sessions/:sessionId', (req, res) => {
    const { sessionId } = req.params;
    const deleted = sessions.delete(sessionId);

    if (!deleted) {
        return res.status(404).json({
            error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
    }

    res.json({
        message: '–°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞'
    });
});

/**
 * GET /api/sessions - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
 */
app.get('/api/sessions', (req, res) => {
    const sessionsList = Array.from(sessions.entries()).map(([id, session]) => ({
        sessionId: id,
        status: session.status,
        listingsCount: session.listings ? session.listings.length : 0,
        startTime: new Date(session.startTime).toISOString(),
        error: session.error
    }));

    res.json({
        activeSessions: sessionsList,
        total: sessions.size
    });
});

/**
 * GET /api/stats/:sessionId - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Å—Å–∏–∏
 */
app.get('/api/stats/:sessionId', (req, res) => {
    const { sessionId } = req.params;
    const session = sessions.get(sessionId);

    if (!session) {
        return res.status(404).json({
            error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
    }

    if (!session.listings || session.listings.length === 0) {
        return res.json({
            count: 0,
            message: '–ü–∞—Ä—Å–∏–Ω–≥ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω'
        });
    }

    const listings = session.listings;
    const prices = listings.map(l => l.price).filter(p => p > 0);
    const avgPrice = prices.length > 0 ? Math.round(prices.reduce((a, b) => a + b) / prices.length) : 0;
    const minPrice = prices.length > 0 ? Math.min(...prices) : 0;
    const maxPrice = prices.length > 0 ? Math.max(...prices) : 0;
    const regions = new Set(listings.map(l => l.region).filter(r => r));
    const sellers = new Set(listings.map(l => l.seller).filter(s => s));

    res.json({
        totalListings: listings.length,
        avgPrice,
        minPrice,
        maxPrice,
        uniqueRegions: regions.size,
        uniqueSellers: sellers.size,
        regions: Array.from(regions),
        stats: {
            priceRange: `‚ÇΩ${minPrice.toLocaleString('ru-RU')} - ‚ÇΩ${maxPrice.toLocaleString('ru-RU')}`,
            avgPriceFormatted: `‚ÇΩ${avgPrice.toLocaleString('ru-RU')}`
        }
    });
});

/**
 * POST /api/sessions/:id/continue - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ç—á–∞
 */
app.post('/api/sessions/:id/continue', async (req, res) => {
    const { id } = req.params;
    const session = sessions.get(id);

    if (!session) {
        return res.status(404).json({
            error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
    }

    if (session.status !== 'paused') {
        return res.status(400).json({
            error: '–°–µ—Å—Å–∏—è –Ω–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
            currentStatus: session.status
        });
    }

    const { parser } = session;
    session.status = 'running';
    session.resumeTime = Date.now();

    res.json({
        sessionId: id,
        status: 'resumed',
        message: '–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è',
        currentCount: parser.listings.length
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–±—Ä–∞—É–∑–µ—Ä –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Å—Ç–∞—é—Ç—Å—è –∂–∏–≤—ã–º–∏)
    parser.parse()
        .then((result) => {
            if (result && result.paused) {
                // –ü–∞—Ä—Å–∏–Ω–≥ —Å–Ω–æ–≤–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –±–∞—Ç—á–µ
                session.status = 'paused';
                session.listings = parser.listings;
                session.batchNumber = result.batchNumber;
                console.log(`‚è∏Ô∏è –°–µ—Å—Å–∏—è ${id} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –±–∞—Ç—á–µ ${result.batchNumber}: ${parser.listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            } else {
                // –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω
                session.status = 'completed';
                session.listings = parser.listings || result;
                session.endTime = Date.now();
                session.progress = 100;
                console.log(`‚úÖ –°–µ—Å—Å–∏—è ${id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${parser.listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            }
        })
        .catch((error) => {
            session.status = 'error';
            session.error = error.message;
            session.endTime = Date.now();
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ ${id}:`, error.message);
        });
});

/**
 * POST /api/sessions/:sessionId/resume - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
 */
app.post('/api/sessions/:sessionId/resume', async (req, res) => {
    const { sessionId } = req.params;
    const session = sessions.get(sessionId);

    if (!session) {
        return res.status(404).json({
            error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
    }

    if (session.status !== 'stopped') {
        return res.status(400).json({
            error: '–ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            currentStatus: session.status
        });
    }

    // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const parser = session.pausedParser;
    if (!parser) {
        return res.status(400).json({
            error: '–ü–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏'
        });
    }

    session.status = 'running';
    session.resumeTime = Date.now();

    res.json({
        sessionId,
        status: 'resumed',
        message: '–ü–∞—Ä—Å–∏–Ω–≥ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω',
        currentCount: parser.listings ? parser.listings.length : 0
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    parser.parse()
        .then((result) => {
            if (result && result.paused) {
                // –ü–∞—Ä—Å–∏–Ω–≥ —Å–Ω–æ–≤–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –±–∞—Ç—á–µ
                session.status = 'paused';
                session.listings = parser.listings;
                session.batchNumber = result.batchNumber;
                console.log(`‚è∏Ô∏è –°–µ—Å—Å–∏—è ${sessionId} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –±–∞—Ç—á–µ ${result.batchNumber}: ${parser.listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            } else {
                // –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω
                session.status = 'completed';
                session.listings = parser.listings || result;
                session.endTime = Date.now();
                session.progress = 100;
                console.log(`‚úÖ –°–µ—Å—Å–∏—è ${sessionId} –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${parser.listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            }
        })
        .catch((error) => {
            session.status = 'error';
            session.error = error.message;
            session.endTime = Date.now();
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ ${sessionId}:`, error.message);
        });
});

/**
 * POST /api/sessions/:sessionId/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
 */
app.post('/api/sessions/:sessionId/stop', (req, res) => {
    const { sessionId } = req.params;
    const session = sessions.get(sessionId);

    if (!session) {
        return res.status(404).json({
            error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
    }

    if (session.status !== 'running') {
        return res.status(400).json({
            error: '–ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω',
            currentStatus: session.status
        });
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ (–Ω–æ –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
    const parser = session.parser;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    session.status = 'stopped';
    session.listings = parser ? parser.listings : [];
    session.endTime = Date.now();
    session.stoppedAt = session.listings ? session.listings.length : 0;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—Å–µ—Ä –≤ —Å–µ—Å—Å–∏—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä!)
    session.pausedParser = parser;

    console.log(`üõë –°–µ—Å—Å–∏—è ${sessionId} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${session.stoppedAt} –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å–æ–±—Ä–∞–Ω–æ`);

    res.json({
        sessionId,
        status: 'stopped',
        message: '–ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        listingsCount: session.stoppedAt,
        listings: session.listings
    });
});

// === WEB-–ò–ù–¢–ï–†–§–ï–ô–° –î–õ–Ø –ó–ê–ü–£–°–ö–ê –ü–ê–†–°–ï–†–ê ===
// –í–ê–ñ–ù–û: —ç—Ç–∏ –º–∞—Ä—à—Ä—É—Ç—ã –î–û–õ–ñ–ù–´ –±—ã—Ç—å –ø–µ—Ä–µ–¥ app.use() –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏!

// GET / ‚Äî –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
// GET / ‚Äî –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (_req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="ru">
    <head>
      <meta charset="utf-8">
      <title>Autonomera777 Parser</title>
      <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 50px auto; padding: 20px; }
        h1 { color: #333; }
        p { color: #666; line-height: 1.6; }
        a { color: #0066cc; text-decoration: none; margin-right: 15px; }
        a:hover { text-decoration: underline; }
      </style>
    </head>
    <body>
      <h1>üöÄ Autonomera777 Parser</h1>
      <p>–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!</p>

      <h2>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</h2>
      <ul>
        <li><a href="/run">‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥</a> ‚Äî –Ω–∞—á–∞—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö</li>
        <li><a href="/api/health">üè• /api/health</a> ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞</li>
        <li><a href="/api/sessions">üìä /api/sessions</a> ‚Äî —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π</li>
      </ul>

      <h2>API Endpoints:</h2>
      <pre>
GET    /                               - —ç—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
GET    /run                            - –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
GET    /session/:id                    - —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
POST   /api/parse                      - –Ω–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥
GET    /api/health                     - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
GET    /api/sessions                   - —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π
GET    /api/sessions/:id/status        - —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏
GET    /api/sessions/:id/data          - –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
GET    /api/sessions/:id/export        - —ç–∫—Å–ø–æ—Ä—Ç (csv/json)
POST   /api/sessions/:id/continue      - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥
DELETE /api/sessions/:id               - —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é
      </pre>
    </body>
    </html>
  `);
});

// GET /run ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç –Ω–∞ —Å—Ç–∞—Ç—É—Å
app.get('/run', async (req, res) => {
  const priceMin = Number(req.query.priceMin ?? 0);
  const priceMax = Number(req.query.priceMax ?? 10000000);
  const region   = (req.query.region || '').toString().trim() || null;

  try {
    const r = await fetch('http://localhost:3000/api/parse', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ priceMin, priceMax, region })
    });
    if (!r.ok) return res.status(500).send(await r.text());

    const data = await r.json();
    const id = data.sessionId || data.id;
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç - Express —Å trust proxy —Å–∞–º –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç
    return res.redirect(303, `/session/${id}`);
  } catch (e) {
    return res.status(500).send(String(e));
  }
});

// GET /session/:id ‚Äî –ø—Ä–æ—Å—Ç–µ–π—à–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç—É—Å–∞
app.get('/session/:id', async (req, res) => {
  const id = req.params.id;
  try {
    const r = await fetch(`http://localhost:3000/api/sessions/${id}/status`);
    const s = await r.json();
    res.type('html').send(`
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <title>–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞</title>
      <style>
        body { font-family: system-ui, sans-serif; padding: 20px; max-width: 800px; margin: 0 auto; }
        h1 { color: #333; }
        .status { padding: 10px; border-radius: 4px; margin: 10px 0; }
        .status.running { background: #e3f2fd; color: #1976d2; }
        .status.paused { background: #fff3e0; color: #f57c00; }
        .status.completed { background: #e8f5e9; color: #388e3c; }
        .status.error { background: #ffebee; color: #d32f2f; }
        a, button { padding: 8px 12px; margin: 5px; border-radius: 4px; text-decoration: none; display: inline-block; }
        a { background: #0066cc; color: white; }
        button { background: #0066cc; color: white; border: none; cursor: pointer; font-size: 14px; }
        a:hover, button:hover { background: #0052a3; }
        .links { margin: 20px 0; }
        pre { background: #f5f5f5; padding: 10px; border-radius: 4px; overflow-x: auto; font-size: 12px; }
      </style>
      <h1>üîÑ –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞</h1>
      <div class="status ${s.status}">
        <strong>–°—Ç–∞—Ç—É—Å:</strong> ${s.status}
        ${s.processed ? ` | <strong>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</strong> ${s.processed}` : ''}
      </div>
      <div class="links">
        <a href="/api/sessions/${id}/data" target="_blank">üìä –î–∞–Ω–Ω—ã–µ</a>
        <a href="/api/sessions/${id}/export?format=json" target="_blank">üìÑ JSON</a>
        <a href="/api/sessions/${id}/export?format=csv" target="_blank">üìã CSV</a>
        ${s.status === 'paused' ? `<form method="POST" action="/api/sessions/${id}/continue" style="display:inline;"><button>‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–µ—â—ë 500)</button></form>` : ''}
        <a href="/">üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
      </div>
      <pre>${JSON.stringify(s, null, 2)}</pre>
      <script>
        if ('${s.status}' !== 'completed' && '${s.status}' !== 'error') {
          setTimeout(() => location.reload(), 3000);
        }
      </script>
    `);
  } catch (e) {
    res.status(500).type('html').send(`
      <meta charset="utf-8">
      <h1>‚ùå –û—à–∏–±–∫–∞</h1>
      <p>${String(e)}</p>
      <a href="/">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
    `);
  }
});

/**
 * === CRON-–ó–ê–ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ü–ê–†–°–ò–ù–ì–ê ===
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:01 (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
 */
let cronTaskRunning = false;

async function runCronParsing() {
  if (cronTaskRunning) {
    console.log('‚ö†Ô∏è  Cron –ø–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
    return;
  }

  cronTaskRunning = true;
  const cronSessionId = generateSessionId();
  const startTime = new Date().toISOString();

  console.log('\n' + '='.repeat(60));
  console.log(`ü§ñ CRON-–ü–ê–†–°–ò–ù–ì –ó–ê–ü–£–©–ï–ù: ${startTime}`);
  console.log(`üìå –°–µ—Å—Å–∏—è: ${cronSessionId}`);
  console.log('='.repeat(60));

  try {
    // –ß–∏—Ç–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ .env
    const minPrice = Number(process.env.MIN_PRICE || 0);
    const maxPrice = Number(process.env.MAX_PRICE || 10000000);
    const maxPages = Number(process.env.MAX_PAGES || 100);
    const region = process.env.PARSER_REGION || null;
    const delayMs = Number(process.env.REQUEST_DELAY || 100);

    console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: —Ü–µ–Ω–∞ ${minPrice}-${maxPrice}, —Ä–µ–≥–∏–æ–Ω: ${region}, —Å—Ç—Ä–∞–Ω–∏—Ü: ${maxPages}`);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ cron —Å–µ—Å—Å–∏–∏ –≤ –ë–î
    try {
      await db.createParseSession(cronSessionId, {
        minPrice,
        maxPrice,
        maxPages,
        region,
        scheduledType: 'cron',
        scheduledTime: startTime
      });
    } catch (e) {
      console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å —Å–µ—Å—Å–∏–∏ –≤ –ë–î: ${e.message}`);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    const parser = new AutonomeraParser({
      minPrice,
      maxPrice,
      region,
      maxPages,
      delayMs,
      concurrentRequests: Number(process.env.CONCURRENT_REQUESTS || 500),
      requestDelayMs: Number(process.env.REQUEST_DELAY_MS || 50)
    });

    await parser.initBrowser();
    const result = await parser.parse();
    await parser.closeBrowser();

    console.log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: ${parser.listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î —Å —É–º–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    let newCount = 0;
    let updatedCount = 0;
    let unchangedCount = 0;

    for (const listing of parser.listings) {
      try {
        const upsertResult = await db.smartUpsertListing(listing, cronSessionId);
        if (upsertResult.newEntry) newCount++;
        else if (upsertResult.historyRecorded) updatedCount++;
        else unchangedCount++;
      } catch (e) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ ${listing.number}: ${e.message}`);
      }
    }

    console.log(`üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:`);
    console.log(`   - –ù–æ–≤—ã—Ö: ${newCount}`);
    console.log(`   - –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount}`);
    console.log(`   - –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${unchangedCount}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ –≤ –ë–î
    try {
      await db.updateParseSession(cronSessionId, {
        status: 'completed',
        totalItems: parser.listings.length,
        newItems: newCount,
        updatedItems: updatedCount
      });
    } catch (e) {
      console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏: ${e.message}`);
    }

    console.log(`‚úÖ Cron-–ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω`);
    console.log('='.repeat(60) + '\n');

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ cron-–ø–∞—Ä—Å–∏–Ω–≥–µ: ${error.message}`);
    console.error(error);

    try {
      await db.updateParseSession(cronSessionId, {
        status: 'error',
        error: error.message
      });
    } catch (e) {
      console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É –≤ –ë–î: ${e.message}`);
    }
  } finally {
    cronTaskRunning = false;
  }
}

/**
 * === –ù–û–í–´–ï API ENDPOINTS –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –ò–ó –ë–î ===
 */

// GET /api/db/overview - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏
app.get('/api/db/overview', async (req, res) => {
  try {
    const stats = await db.getListingsStats();
    res.json(stats || {
      total: 0,
      regionsCount: 0,
      sellersCount: 0,
      avgPrice: 0,
      minPrice: 0,
      maxPrice: 0,
      lastUpdate: null
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /api/db/overview:', error);
    res.status(500).json({ error: error.message });
  }
});

// GET /api/db/data - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω
app.get('/api/db/data', async (req, res) => {
  try {
    const limit = Math.min(Number(req.query.limit || 1000), 10000);
    const offset = Number(req.query.offset || 0);
    const filters = {
      limit,
      region: req.query.region || null,
      minPrice: req.query.minPrice ? Number(req.query.minPrice) : undefined,
      maxPrice: req.query.maxPrice ? Number(req.query.maxPrice) : undefined,
      status: req.query.status || null
    };

    const data = await db.getListingsWithHistory(filters);
    res.json({
      count: data.length,
      limit,
      offset,
      rows: data
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /api/db/data:', error);
    res.status(500).json({ error: error.message });
  }
});

// GET /api/db/regions - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
app.get('/api/db/regions', async (req, res) => {
  try {
    const pool = db.pool();
    const client = await pool.connect();
    try {
      const result = await client.query(`
        SELECT
          region,
          COUNT(*) as count,
          ROUND(AVG(CAST(NULLIF(price, '') AS INTEGER))::numeric) as avg_price,
          MIN(CAST(NULLIF(price, '') AS INTEGER)) as min_price,
          MAX(CAST(NULLIF(price, '') AS INTEGER)) as max_price
        FROM listings
        WHERE region IS NOT NULL AND region != ''
        GROUP BY region
        ORDER BY count DESC
        LIMIT 100
      `);
      res.json({ rows: result.rows });
    } finally {
      client.release();
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /api/db/regions:', error);
    res.status(500).json({ error: error.message });
  }
});

// GET /api/db/sellers - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–æ–¥–∞–≤—Ü–∞–º
app.get('/api/db/sellers', async (req, res) => {
  try {
    const pool = db.pool();
    const client = await pool.connect();
    try {
      const result = await client.query(`
        SELECT
          seller,
          COUNT(*) as count,
          ROUND(AVG(CAST(NULLIF(price, '') AS INTEGER))::numeric) as avg_price,
          MIN(CAST(NULLIF(price, '') AS INTEGER)) as min_price,
          MAX(CAST(NULLIF(price, '') AS INTEGER)) as max_price
        FROM listings
        WHERE seller IS NOT NULL AND seller != ''
        GROUP BY seller
        ORDER BY count DESC
        LIMIT 100
      `);
      res.json({ rows: result.rows });
    } finally {
      client.release();
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /api/db/sellers:', error);
    res.status(500).json({ error: error.message });
  }
});

// GET /api/db/export - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –≤ XLSX
app.get('/api/db/export', async (req, res) => {
  try {
    const data = await db.getListingsWithHistory({ limit: 100000 });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è XLSX
    const rows = data.map(item => ({
      '–ù–æ–º–µ—Ä': item.number,
      '–¶–µ–Ω–∞': item.price,
      '–†–µ–≥–∏–æ–Ω': item.region,
      '–°—Ç–∞—Ç—É—Å': item.status,
      '–ü—Ä–æ–¥–∞–≤–µ—Ü': item.seller,
      '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è': item.date_updated,
      '–ò–∑–º. —Ü–µ–Ω—ã': item.last_change?.price_delta || '-',
      '–î–∞—Ç–∞ –∏–∑–º. —Ü–µ–Ω—ã': item.last_change?.date_updated_site || '-',
      'URL': item.url
    }));

    const ws = XLSX.utils.json_to_sheet(rows);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Listings');

    const filename = `autonomera_export_${new Date().toISOString().split('T')[0]}.xlsx`;
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');

    const buf = XLSX.write(wb, { bookType: 'xlsx', type: 'buffer' });
    res.send(buf);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /api/db/export:', error);
    res.status(500).json({ error: error.message });
  }
});

// GET /api/db/price-changes - –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω
app.get('/api/db/price-changes', async (req, res) => {
  try {
    const days = Number(req.query.days || 7);
    const limit = Math.min(Number(req.query.limit || 1000), 10000);

    const client = db.pool();
    const result = await client.query(`
      SELECT
        number,
        old_price,
        new_price,
        price_delta,
        change_direction,
        date_updated_site,
        recorded_at
      FROM listing_history
      WHERE date_updated_site >= NOW() - INTERVAL '${days} days'
      ORDER BY recorded_at DESC
      LIMIT ${limit}
    `);

    res.json({
      days,
      count: result.rows.length,
      rows: result.rows
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /api/db/price-changes:', error);
    res.status(500).json({ error: error.message });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404
app.use((req, res) => {
    console.log(`‚ùå 404: ${req.method} ${req.path} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    res.status(404).json({
        error: 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω',
        path: req.path,
        method: req.method
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    res.status(500).json({
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        message: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
async function initializeApp() {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
        console.log('\n' + '='.repeat(60));
        console.log('üóÑÔ∏è  –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•');
        console.log('='.repeat(60));
        await db.initializeDatabase();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        console.log('\n' + '='.repeat(60));
        console.log('üìÖ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê');
        console.log('='.repeat(60));
        const scheduler = await getScheduler();
        console.log(`‚ÑπÔ∏è  –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: ${scheduler.getStatus().isActive ? '–ê–ö–¢–ò–í–ï–ù' : '–ù–ï–ê–ö–¢–ò–í–ï–ù'}`);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º cron –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        if (process.env.CRON_ENABLED === 'true') {
          const cronTime = process.env.CRON_TIME || '1 0 * * *'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 00:01 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
          const timezone = process.env.PARSER_TIMEZONE || 'Europe/Moscow';

          console.log(`\n‚è∞ CRON –ü–ê–†–°–ò–ù–ì –í–ö–õ–Æ–ß–ï–ù`);
          console.log(`   –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${cronTime}`);
          console.log(`   –¢–∞–π–º–∑–æ–Ω–∞: ${timezone}`);

          cron.schedule(cronTime, () => {
            console.log(`\n‚è±Ô∏è  –ó–∞–ø—É—Å–∫ cron-–ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ ${new Date().toISOString()}`);
            runCronParsing().catch(err => {
              console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ cron-–ø–∞—Ä—Å–∏–Ω–≥–µ: ${err.message}`);
            });
          }, { timezone });

          console.log(`‚úÖ Cron-–ø–∞—Ä—Å–∏–Ω–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
        } else {
          console.log(`\n‚è∞ CRON –ü–ê–†–°–ò–ù–ì –û–¢–ö–õ–Æ–ß–ï–ù`);
          console.log(`   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ CRON_ENABLED=true –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è`);
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        const server = app.listen(PORT, '0.0.0.0', () => {
            console.log(`\nüöÄ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:${PORT}`);
            console.log(`üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ http://0.0.0.0:${PORT}/api/health`);
            console.log(`\nüìç –û—Å–Ω–æ–≤–Ω—ã–µ endpoints:`);
            console.log(`   GET    /                               - –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞`);
            console.log(`   GET    /run                            - –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º –Ω–∞ —Å—Ç–∞—Ç—É—Å`);
            console.log(`   GET    /session/:id                    - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏`);
            console.log(`   POST   /api/parse                      - –Ω–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥`);
            console.log(`   GET    /api/sessions                   - —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π`);
            console.log(`   GET    /api/sessions/:id/status        - —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ (—Å –∏–Ω—Ñ–æ –æ –±–∞—Ç—á–∞—Ö)`);
            console.log(`   GET    /api/sessions/:id/data          - –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å–∏–Ω–≥–∞`);
            console.log(`   GET    /api/sessions/:id/stats         - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞`);
            console.log(`   GET    /api/sessions/:id/export?format=csv|json - —ç–∫—Å–ø–æ—Ä—Ç`);
            console.log(`   POST   /api/sessions/:id/continue      - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ (–±–∞—Ç—á –ø–æ 500)`);
            console.log(`   DELETE /api/sessions/:id               - —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é`);
            console.log(`\nüìä –ù–û–í–´–ï ENDPOINTS (–ë–î):`);
            console.log(`   GET    /api/data                       - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î`);
            console.log(`   GET    /api/statistics                 - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞`);
            console.log(`   GET    /api/export                     - —ç–∫—Å–ø–æ—Ä—Ç –∏–∑ –ë–î`);
            console.log(`   GET    /api/db/status                  - —Å—Ç–∞—Ç—É—Å –ë–î`);
            console.log(`   GET    /api/parse-sessions             - —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞`);
            console.log(`   GET    /api/cron-logs                  - –ª–æ–≥–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
            console.log(`\n‚ö° –ù–û–í–û–ï: –ü–∞—Ä—Å–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ 500 –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –∑–∞—Ç–µ–º –ø–∞—É–∑–∏—Ä—É–µ—Ç!`);
            console.log(`   1. –ù–∞—á–Ω–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥: GET /run?priceMin=0&priceMax=10000000&region=`);
            console.log(`   2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /session/:id`);
            console.log(`   3. –ü—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ "paused" –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"`);
            console.log(`\n‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï`);
            console.log('='.repeat(60) + '\n');
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        process.on('SIGINT', () => {
            console.log('\n\nüëã Shutting down server...');
            server.close(() => {
                console.log('‚úì Server closed');
                process.exit(0);
            });
        });

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
initializeApp();

module.exports = app;
