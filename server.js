const express = require('express');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const { stringify } = require('csv-stringify/sync');
const AutonomeraParser = require('./parser');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞
const sessions = new Map();

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
 */
function generateSessionId() {
    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}

/**
 * GET /api/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
 */
app.get('/api/health', (req, res) => {
    res.json({
        status: 'ok',
        timestamp: new Date().toISOString(),
        activeSessions: sessions.size
    });
});

/**
 * POST /api/parse - –Ω–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
app.post('/api/parse', async (req, res) => {
    const {
        minPrice = 0,
        maxPrice = Infinity,
        region = null,
        maxPages = 50,
        delayMs = 1000
    } = req.body;

    const sessionId = generateSessionId();

    console.log(`\nüöÄ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞: ${sessionId}`);
    console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: —Ü–µ–Ω–∞ ${minPrice}-${maxPrice}, —Ä–µ–≥–∏–æ–Ω: ${region}`);

    const parser = new AutonomeraParser({
        minPrice,
        maxPrice,
        region,
        maxPages,
        delayMs
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—Å–µ—Ä –≤ —Å–µ—Å—Å–∏—é
    sessions.set(sessionId, {
        parser,
        status: 'running',
        progress: 0,
        startTime: Date.now(),
        error: null
    });

    res.json({
        sessionId,
        status: 'started',
        message: '–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–∞–ª—Å—è'
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    parser.parse()
        .then((listings) => {
            const session = sessions.get(sessionId);
            if (session) {
                session.status = 'completed';
                session.listings = listings;
                session.endTime = Date.now();
                session.progress = 100;
            }
            console.log(`‚úÖ –°–µ—Å—Å–∏—è ${sessionId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
        })
        .catch((error) => {
            const session = sessions.get(sessionId);
            if (session) {
                session.status = 'error';
                session.error = error.message;
                session.endTime = Date.now();
            }
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ ${sessionId}:`, error.message);
        });
});

/**
 * GET /api/sessions/:sessionId/status - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
app.get('/api/sessions/:sessionId/status', (req, res) => {
    const { sessionId } = req.params;
    const session = sessions.get(sessionId);

    if (!session) {
        return res.status(404).json({
            error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
    }

    const duration = session.endTime
        ? Math.round((session.endTime - session.startTime) / 1000)
        : Math.round((Date.now() - session.startTime) / 1000);

    res.json({
        sessionId,
        status: session.status,
        progress: session.progress,
        listingsCount: session.listings ? session.listings.length : 0,
        startTime: new Date(session.startTime).toISOString(),
        duration: `${duration}s`,
        error: session.error
    });
});

/**
 * GET /api/sessions/:sessionId/data - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
app.get('/api/sessions/:sessionId/data', (req, res) => {
    const { sessionId } = req.params;
    const session = sessions.get(sessionId);

    if (!session) {
        return res.status(404).json({
            error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
    }

    if (!session.listings) {
        return res.status(400).json({
            error: '–ü–∞—Ä—Å–∏–Ω–≥ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω'
        });
    }

    res.json({
        sessionId,
        count: session.listings.length,
        listings: session.listings
    });
});

/**
 * GET /api/sessions/:sessionId/export - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV
 */
app.get('/api/sessions/:sessionId/export', (req, res) => {
    const { sessionId } = req.params;
    const { format = 'csv' } = req.query;
    const session = sessions.get(sessionId);

    if (!session) {
        return res.status(404).json({
            error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
    }

    if (!session.listings || session.listings.length === 0) {
        return res.status(400).json({
            error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞'
        });
    }

    if (format === 'json') {
        const filename = `autonomera777_${new Date().toISOString().split('T')[0]}.json`;
        res.setHeader('Content-Type', 'application/json');
        res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        res.send(JSON.stringify(session.listings, null, 2));
    } else {
        // CSV –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const csvData = stringify(session.listings, {
            header: true,
            columns: [
                { key: 'number', header: '–ù–æ–º–µ—Ä' },
                { key: 'price', header: '–¶–µ–Ω–∞' },
                { key: 'datePosted', header: '–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è' },
                { key: 'dateUpdated', header: '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' },
                { key: 'status', header: '–°—Ç–∞—Ç—É—Å' },
                { key: 'seller', header: '–ü—Ä–æ–¥–∞–≤–µ—Ü' },
                { key: 'region', header: '–†–µ–≥–∏–æ–Ω' },
                { key: 'url', header: 'URL' }
            ]
        });

        const filename = `autonomera777_${new Date().toISOString().split('T')[0]}.csv`;
        res.setHeader('Content-Type', 'text/csv; charset=utf-8');
        res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        res.send(csvData);
    }
});

/**
 * DELETE /api/sessions/:sessionId - —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
 */
app.delete('/api/sessions/:sessionId', (req, res) => {
    const { sessionId } = req.params;
    const deleted = sessions.delete(sessionId);

    if (!deleted) {
        return res.status(404).json({
            error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
    }

    res.json({
        message: '–°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞'
    });
});

/**
 * GET /api/sessions - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
 */
app.get('/api/sessions', (req, res) => {
    const sessionsList = Array.from(sessions.entries()).map(([id, session]) => ({
        sessionId: id,
        status: session.status,
        listingsCount: session.listings ? session.listings.length : 0,
        startTime: new Date(session.startTime).toISOString(),
        error: session.error
    }));

    res.json({
        activeSessions: sessionsList,
        total: sessions.size
    });
});

/**
 * GET /api/stats/:sessionId - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Å—Å–∏–∏
 */
app.get('/api/stats/:sessionId', (req, res) => {
    const { sessionId } = req.params;
    const session = sessions.get(sessionId);

    if (!session) {
        return res.status(404).json({
            error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
    }

    if (!session.listings || session.listings.length === 0) {
        return res.json({
            count: 0,
            message: '–ü–∞—Ä—Å–∏–Ω–≥ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω'
        });
    }

    const listings = session.listings;
    const prices = listings.map(l => l.price).filter(p => p > 0);
    const avgPrice = prices.length > 0 ? Math.round(prices.reduce((a, b) => a + b) / prices.length) : 0;
    const minPrice = prices.length > 0 ? Math.min(...prices) : 0;
    const maxPrice = prices.length > 0 ? Math.max(...prices) : 0;
    const regions = new Set(listings.map(l => l.region).filter(r => r));
    const sellers = new Set(listings.map(l => l.seller).filter(s => s));

    res.json({
        totalListings: listings.length,
        avgPrice,
        minPrice,
        maxPrice,
        uniqueRegions: regions.size,
        uniqueSellers: sellers.size,
        regions: Array.from(regions),
        stats: {
            priceRange: `‚ÇΩ${minPrice.toLocaleString('ru-RU')} - ‚ÇΩ${maxPrice.toLocaleString('ru-RU')}`,
            avgPriceFormatted: `‚ÇΩ${avgPrice.toLocaleString('ru-RU')}`
        }
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404
app.use((req, res) => {
    res.status(404).json({
        error: 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω',
        path: req.path
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    res.status(500).json({
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        message: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const server = app.listen(PORT, () => {
    console.log(`\nüöÄ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    console.log(`üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ http://localhost:${PORT}/api/health`);
    console.log(`\nüìç –û—Å–Ω–æ–≤–Ω—ã–µ endpoints:`);
    console.log(`   POST   /api/parse                      - –Ω–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥`);
    console.log(`   GET    /api/sessions                   - —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π`);
    console.log(`   GET    /api/sessions/:id/status        - —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏`);
    console.log(`   GET    /api/sessions/:id/data          - –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å–∏–Ω–≥–∞`);
    console.log(`   GET    /api/sessions/:id/stats         - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞`);
    console.log(`   GET    /api/sessions/:id/export?format=csv|json - —ç–∫—Å–ø–æ—Ä—Ç`);
    console.log(`   DELETE /api/sessions/:id               - —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é`);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
process.on('SIGINT', () => {
    console.log('\n\nüëã Shutting down server...');
    server.close(() => {
        console.log('‚úÖ Server closed');
        process.exit(0);
    });
});

module.exports = app;
