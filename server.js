const express = require('express');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const { stringify } = require('csv-stringify/sync');
const AutonomeraParser = require('./parser');

const app = express();
const PORT = process.env.PORT || 3000;

// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏ –¥–ª—è Puppeteer
process.setMaxListeners(0);

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞
const sessions = new Map();

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
 */
function generateSessionId() {
    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}

/**
 * GET /api/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
 */
app.get('/api/health', (req, res) => {
    res.json({
        status: 'ok',
        timestamp: new Date().toISOString(),
        activeSessions: sessions.size
    });
});

/**
 * POST /api/parse - –Ω–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
app.post('/api/parse', async (req, res) => {
    const {
        minPrice = 0,
        maxPrice = Infinity,
        region = null,
        maxPages = 50,
        delayMs = 1000
    } = req.body;

    const sessionId = generateSessionId();

    console.log(`\nüöÄ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞: ${sessionId}`);
    console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: —Ü–µ–Ω–∞ ${minPrice}-${maxPrice}, —Ä–µ–≥–∏–æ–Ω: ${region}`);

    const parser = new AutonomeraParser({
        minPrice,
        maxPrice,
        region,
        maxPages,
        delayMs
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—Å–µ—Ä –≤ —Å–µ—Å—Å–∏—é
    sessions.set(sessionId, {
        parser,
        status: 'running',
        progress: 0,
        startTime: Date.now(),
        error: null
    });

    res.json({
        sessionId,
        status: 'started',
        message: '–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–∞–ª—Å—è'
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    parser.parse()
        .then((result) => {
            const session = sessions.get(sessionId);
            if (session) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –±–∞—Ç—á–µ
                if (result && result.paused) {
                    session.status = 'paused';
                    session.listings = parser.listings;
                    session.batchNumber = result.result.batchNumber;
                    session.totalSoFar = parser.listings.length;
                    console.log(`‚è∏Ô∏è –°–µ—Å—Å–∏—è ${sessionId} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –±–∞—Ç—á–µ ${result.result.batchNumber}: ${parser.listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
                    console.log(`üëâ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–∑–æ–≤–∏—Ç–µ: POST /api/sessions/${sessionId}/continue`);
                } else {
                    session.status = 'completed';
                    session.listings = parser.listings || result;
                    session.endTime = Date.now();
                    session.progress = 100;
                    console.log(`‚úÖ –°–µ—Å—Å–∏—è ${sessionId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${(parser.listings || result).length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
                }
            }
        })
        .catch((error) => {
            const session = sessions.get(sessionId);
            if (session) {
                session.status = 'error';
                session.error = error.message;
                session.endTime = Date.now();
            }
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ ${sessionId}:`, error.message);
        });
});

/**
 * GET /api/sessions/:sessionId/status - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
app.get('/api/sessions/:sessionId/status', (req, res) => {
    const { sessionId } = req.params;
    const session = sessions.get(sessionId);

    if (!session) {
        return res.status(404).json({
            error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
    }

    const duration = session.endTime
        ? Math.round((session.endTime - session.startTime) / 1000)
        : Math.round((Date.now() - session.startTime) / 1000);

    const listingsCount = session.listings ? session.listings.length : 0;
    const response = {
        sessionId,
        status: session.status,
        progress: session.progress,
        listingsCount: listingsCount,
        startTime: new Date(session.startTime).toISOString(),
        duration: `${duration}s`,
        error: session.error
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞—Ç—á–∞—Ö –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if (session.status === 'paused') {
        response.batch = {
            number: session.batchNumber || 1,
            itemsPerBatch: 500,
            nextUrl: `/api/sessions/${sessionId}/continue`,
            message: 'üëâ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞',
            instruction: `POST http://localhost:3000/api/sessions/${sessionId}/continue`
        };
    }

    res.json(response);
});

/**
 * GET /api/sessions/:sessionId/data - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
app.get('/api/sessions/:sessionId/data', (req, res) => {
    const { sessionId } = req.params;
    const session = sessions.get(sessionId);

    if (!session) {
        return res.status(404).json({
            error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
    }

    if (!session.listings) {
        return res.status(400).json({
            error: '–ü–∞—Ä—Å–∏–Ω–≥ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω'
        });
    }

    res.json({
        sessionId,
        count: session.listings.length,
        listings: session.listings
    });
});

/**
 * GET /api/sessions/:sessionId/export - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV
 */
app.get('/api/sessions/:sessionId/export', (req, res) => {
    const { sessionId } = req.params;
    const { format = 'csv' } = req.query;
    const session = sessions.get(sessionId);

    if (!session) {
        return res.status(404).json({
            error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
    }

    if (!session.listings || session.listings.length === 0) {
        return res.status(400).json({
            error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞'
        });
    }

    if (format === 'json') {
        const filename = `autonomera777_${new Date().toISOString().split('T')[0]}.json`;
        res.setHeader('Content-Type', 'application/json; charset=utf-8');
        res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        res.send(JSON.stringify(session.listings, null, 2));
    } else if (format === 'xlsx' || format === 'excel') {
        // Excel XLSX —Ñ–æ—Ä–º–∞—Ç - —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –¥–ª—è Excel
        const headers = ['–ù–æ–º–µ—Ä', '–¶–µ–Ω–∞', '–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è', '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', '–°—Ç–∞—Ç—É—Å', '–ü—Ä–æ–¥–∞–≤–µ—Ü', '–†–µ–≥–∏–æ–Ω', 'URL'];
        const rows = session.listings.map(item => [
            item.number || '',
            item.price || '',
            item.datePosted || '',
            item.dateUpdated || '',
            item.status || '',
            item.seller || '',
            item.region || '',
            item.url || ''
        ]);

        // –°–æ–∑–¥–∞–µ–º CSV —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏ –¥–ª—è Excel
        let csvContent = '\ufeff'; // UTF-8 BOM
        csvContent += headers.map(h => `"${h}"`).join(',') + '\n';

        rows.forEach(row => {
            csvContent += row.map(cell => {
                // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –∫–∞–≤—ã—á–∫–∏
                const escaped = String(cell).replace(/"/g, '""');
                return `"${escaped}"`;
            }).join(',') + '\n';
        });

        const filename = `autonomera777_${new Date().toISOString().split('T')[0]}.xlsx`;
        const filepath = path.join(process.cwd(), filename);

        fs.writeFileSync(filepath, csvContent, 'utf8');

        res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet; charset=utf-8');
        res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        res.download(filepath, filename, (err) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', err);
            }
        });
    } else {
        // CSV –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–æ–º
        const headers = ['–ù–æ–º–µ—Ä', '–¶–µ–Ω–∞', '–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è', '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', '–°—Ç–∞—Ç—É—Å', '–ü—Ä–æ–¥–∞–≤–µ—Ü', '–†–µ–≥–∏–æ–Ω', 'URL'];
        const rows = session.listings.map(item => [
            item.number || '',
            item.price || '',
            item.datePosted || '',
            item.dateUpdated || '',
            item.status || '',
            item.seller || '',
            item.region || '',
            item.url || ''
        ]);

        // –°–æ–∑–¥–∞–µ–º CSV —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏
        let csvContent = '\ufeff'; // UTF-8 BOM
        csvContent += headers.map(h => `"${h}"`).join(',') + '\n';

        rows.forEach(row => {
            csvContent += row.map(cell => {
                // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –∫–∞–≤—ã—á–∫–∏
                const escaped = String(cell).replace(/"/g, '""');
                return `"${escaped}"`;
            }).join(',') + '\n';
        });

        const filename = `autonomera777_${new Date().toISOString().split('T')[0]}.csv`;
        const filepath = path.join(process.cwd(), filename);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8
        fs.writeFileSync(filepath, csvContent, 'utf8');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        res.setHeader('Content-Type', 'text/csv; charset=utf-8');
        res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        res.download(filepath, filename, (err) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', err);
            }
        });
    }
});

/**
 * DELETE /api/sessions/:sessionId - —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
 */
app.delete('/api/sessions/:sessionId', (req, res) => {
    const { sessionId } = req.params;
    const deleted = sessions.delete(sessionId);

    if (!deleted) {
        return res.status(404).json({
            error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
    }

    res.json({
        message: '–°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞'
    });
});

/**
 * GET /api/sessions - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
 */
app.get('/api/sessions', (req, res) => {
    const sessionsList = Array.from(sessions.entries()).map(([id, session]) => ({
        sessionId: id,
        status: session.status,
        listingsCount: session.listings ? session.listings.length : 0,
        startTime: new Date(session.startTime).toISOString(),
        error: session.error
    }));

    res.json({
        activeSessions: sessionsList,
        total: sessions.size
    });
});

/**
 * GET /api/stats/:sessionId - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Å—Å–∏–∏
 */
app.get('/api/stats/:sessionId', (req, res) => {
    const { sessionId } = req.params;
    const session = sessions.get(sessionId);

    if (!session) {
        return res.status(404).json({
            error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
    }

    if (!session.listings || session.listings.length === 0) {
        return res.json({
            count: 0,
            message: '–ü–∞—Ä—Å–∏–Ω–≥ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω'
        });
    }

    const listings = session.listings;
    const prices = listings.map(l => l.price).filter(p => p > 0);
    const avgPrice = prices.length > 0 ? Math.round(prices.reduce((a, b) => a + b) / prices.length) : 0;
    const minPrice = prices.length > 0 ? Math.min(...prices) : 0;
    const maxPrice = prices.length > 0 ? Math.max(...prices) : 0;
    const regions = new Set(listings.map(l => l.region).filter(r => r));
    const sellers = new Set(listings.map(l => l.seller).filter(s => s));

    res.json({
        totalListings: listings.length,
        avgPrice,
        minPrice,
        maxPrice,
        uniqueRegions: regions.size,
        uniqueSellers: sellers.size,
        regions: Array.from(regions),
        stats: {
            priceRange: `‚ÇΩ${minPrice.toLocaleString('ru-RU')} - ‚ÇΩ${maxPrice.toLocaleString('ru-RU')}`,
            avgPriceFormatted: `‚ÇΩ${avgPrice.toLocaleString('ru-RU')}`
        }
    });
});

/**
 * POST /api/sessions/:id/continue - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ç—á–∞
 */
app.post('/api/sessions/:id/continue', async (req, res) => {
    const { id } = req.params;
    const session = sessions.get(id);

    if (!session) {
        return res.status(404).json({
            error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
    }

    if (session.status !== 'paused') {
        return res.status(400).json({
            error: '–°–µ—Å—Å–∏—è –Ω–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
            currentStatus: session.status
        });
    }

    const { parser } = session;
    session.status = 'running';
    session.resumeTime = Date.now();

    res.json({
        sessionId: id,
        status: 'resumed',
        message: '–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è',
        currentCount: parser.listings.length
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–±—Ä–∞—É–∑–µ—Ä –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Å—Ç–∞—é—Ç—Å—è –∂–∏–≤—ã–º–∏)
    parser.parse()
        .then((result) => {
            if (result && result.paused) {
                // –ü–∞—Ä—Å–∏–Ω–≥ —Å–Ω–æ–≤–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –±–∞—Ç—á–µ
                session.status = 'paused';
                session.listings = parser.listings;
                session.batchNumber = result.result.batchNumber;
                console.log(`‚è∏Ô∏è –°–µ—Å—Å–∏—è ${id} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –±–∞—Ç—á–µ ${result.result.batchNumber}: ${parser.listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            } else {
                // –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω
                session.status = 'completed';
                session.listings = parser.listings || result;
                session.endTime = Date.now();
                session.progress = 100;
                console.log(`‚úÖ –°–µ—Å—Å–∏—è ${id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${parser.listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            }
        })
        .catch((error) => {
            session.status = 'error';
            session.error = error.message;
            session.endTime = Date.now();
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ ${id}:`, error.message);
        });
});

// === WEB-–ò–ù–¢–ï–†–§–ï–ô–° –î–õ–Ø –ó–ê–ü–£–°–ö–ê –ü–ê–†–°–ï–†–ê ===

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π
app.get('/', (req, res) => {
    res.type('html').send(`
<!doctype html>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>–ü–∞—Ä—Å–µ—Ä –ê–í–¢–û–ù–û–ú–ï–†–ê777</title>
<style>
  * { box-sizing: border-box; }
  body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;
    padding: 24px;
    max-width: 600px;
    margin: 0 auto;
    background: #f5f5f5;
  }
  .container {
    background: white;
    padding: 32px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }
  h1 { color: #333; margin-top: 0; }
  .form-group {
    margin: 16px 0;
  }
  label {
    display: block;
    margin-bottom: 6px;
    font-weight: 500;
    color: #555;
  }
  input, select {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
  }
  input:focus, select:focus {
    outline: none;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px rgba(0, 102, 204, 0.1);
  }
  button {
    width: 100%;
    padding: 12px;
    font-size: 16px;
    font-weight: 600;
    background: #0066cc;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 16px;
  }
  button:hover {
    background: #0052a3;
  }
  button:active {
    transform: scale(0.98);
  }
  .info {
    margin-top: 20px;
    padding: 12px;
    background: #f0f7ff;
    border-left: 4px solid #0066cc;
    border-radius: 4px;
    font-size: 13px;
    color: #333;
  }
</style>

<div class="container">
  <h1>üöó –ü–∞—Ä—Å–µ—Ä –ê–í–¢–û–ù–û–ú–ï–†–ê777</h1>

  <form action="/run" method="GET">
    <div class="form-group">
      <label for="priceMin">–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)</label>
      <input type="number" id="priceMin" name="priceMin" value="0" min="0">
    </div>

    <div class="form-group">
      <label for="priceMax">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)</label>
      <input type="number" id="priceMax" name="priceMax" value="10000000" min="0">
    </div>

    <div class="form-group">
      <label for="region">–†–µ–≥–∏–æ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
      <input type="text" id="region" name="region" placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: 77 –∏–ª–∏ –ø—É—Å—Ç–æ –¥–ª—è –≤—Å–µ—Ö">
    </div>

    <button type="submit">–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥</button>
  </form>

  <div class="info">
    <strong>‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</strong><br>
    1. –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞<br>
    2. –ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥¬ª<br>
    3. –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ 500 –æ–±—ä—è–≤–ª–µ–Ω–∏–π<br>
    4. –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã<br>
    5. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ CSV –∏–ª–∏ JSON
  </div>
</div>
    `);
});

// GET /run ‚Äî –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
app.get('/run', async (req, res) => {
    const priceMin = Number(req.query.priceMin ?? 0);
    const priceMax = Number(req.query.priceMax ?? 10000000);
    const region = req.query.region?.toString().trim() || null;

    try {
        console.log(`üîç –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞: —Ü–µ–Ω–∞ ${priceMin}-${priceMax}, —Ä–µ–≥–∏–æ–Ω: ${region || '–≤—Å–µ'}`);

        const result = await new Promise((resolve, reject) => {
            const req = require('http').request('http://localhost:3000/api/parse', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            }, (res) => {
                let data = '';
                res.on('data', chunk => data += chunk);
                res.on('end', () => {
                    try {
                        resolve(JSON.parse(data));
                    } catch (e) {
                        reject(new Error(`Invalid JSON: ${data}`));
                    }
                });
            });
            req.on('error', reject);
            req.write(JSON.stringify({ priceMin, priceMax, region }));
            req.end();
        });

        const sessionId = result.sessionId;
        if (!sessionId) {
            return res.status(500).send('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–µ—Å—Å–∏–∏');
        }

        console.log(`‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${sessionId}`);
        res.redirect(`/session/${encodeURIComponent(sessionId)}`);
    } catch (e) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${e.message}`);
        res.status(500).type('html').send(`
<div style="max-width:600px;margin:50px auto;padding:20px;font-family:system-ui">
  <h2>‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞</h2>
  <p>${String(e.message)}</p>
  <a href="/">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è</a>
</div>
        `);
    }
});

// GET /session/:id ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç—É—Å–∞
app.get('/session/:id', (req, res) => {
    const id = req.params.id;
    res.type('html').send(`
<!doctype html>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>–°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏</title>
<style>
  body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;
    padding: 24px;
    max-width: 700px;
    margin: 0 auto;
    background: #f5f5f5;
  }
  .container {
    background: white;
    padding: 24px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }
  h1 { color: #333; margin-top: 0; }
  .status { padding: 12px; border-radius: 4px; margin: 12px 0; }
  .status.running { background: #cce5ff; color: #003d99; }
  .status.paused { background: #fff3cd; color: #856404; }
  .status.completed { background: #d4edda; color: #155724; }
  .status.error { background: #f8d7da; color: #721c24; }
  button, a.btn {
    display: inline-block;
    padding: 10px 16px;
    margin-right: 8px;
    margin-bottom: 8px;
    font-size: 14px;
    background: #0066cc;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    text-decoration: none;
  }
  button:hover, a.btn:hover { background: #0052a3; }
  .log { background: #f8f8f8; padding: 12px; border-radius: 4px; font-family: monospace; font-size: 12px; max-height: 300px; overflow-y: auto; }
  .spinner { display: inline-block; width: 12px; height: 12px; border: 2px solid #ccc; border-top-color: #0066cc; border-radius: 50%; animation: spin 0.8s linear infinite; }
  @keyframes spin { to { transform: rotate(360deg); } }
</style>

<div class="container">
  <h1>üìä –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞</h1>
  <div id="status" class="status running">
    <span class="spinner"></span> –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞‚Ä¶
  </div>

  <div id="buttons" style="margin: 16px 0;"></div>

  <div class="log" id="log">–û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö‚Ä¶</div>
</div>

<script>
const sessionId = ${JSON.stringify(id)};
let lastStatus = null;

const poll = async () => {
  try {
    const r = await fetch('/api/sessions/'+sessionId+'/status');
    const s = await r.json();
    lastStatus = s;

    const status = document.getElementById('status');
    status.className = 'status ' + (s.status || 'running');
    status.textContent = 'üìä –°—Ç–∞—Ç—É—Å: ' + (s.status === 'completed' ? '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ' :
                                         s.status === 'paused' ? '‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' :
                                         s.status === 'error' ? '‚ùå –û—à–∏–±–∫–∞' : 'üîÑ –†–∞–±–æ—Ç–∞–µ—Ç') +
                       ' | –û–±—ä—è–≤–ª–µ–Ω–∏–π: ' + (s.listingsCount || 0);

    const btns = document.getElementById('buttons');
    btns.innerHTML = '';

    if (s.status === 'paused') {
      const btn = document.createElement('button');
      btn.textContent = '‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–µ—â—ë 500)';
      btn.onclick = async () => {
        btn.disabled = true;
        await fetch('/api/sessions/'+sessionId+'/continue', {method:'POST'});
        setTimeout(poll, 500);
      };
      btns.appendChild(btn);
    }

    const link1 = document.createElement('a');
    link1.href = '/api/sessions/'+sessionId+'/data';
    link1.className = 'btn';
    link1.target = '_blank';
    link1.textContent = 'üìã –î–∞–Ω–Ω—ã–µ JSON';
    btns.appendChild(link1);

    const link2 = document.createElement('a');
    link2.href = '/api/sessions/'+sessionId+'/export?format=csv';
    link2.className = 'btn';
    link2.textContent = 'üì• –°–∫–∞—á–∞—Ç—å CSV';
    btns.appendChild(link2);

    const link3 = document.createElement('a');
    link3.href = '/';
    link3.className = 'btn';
    link3.style.background = '#666';
    link3.textContent = 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é';
    btns.appendChild(link3);

    document.getElementById('log').textContent = JSON.stringify(s, null, 2);
  } catch(e) {
    document.getElementById('status').className = 'status error';
    document.getElementById('status').textContent = '‚ùå –û—à–∏–±–∫–∞: ' + e.message;
  }
};

setInterval(poll, 2000);
poll();
</script>
    `);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404
app.use((req, res) => {
    res.status(404).json({
        error: 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω',
        path: req.path
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    res.status(500).json({
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        message: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const server = app.listen(PORT, () => {
    console.log(`\nüöÄ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    console.log(`üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ http://localhost:${PORT}/api/health`);
    console.log(`\nüìç –û—Å–Ω–æ–≤–Ω—ã–µ endpoints:`);
    console.log(`   POST   /api/parse                      - –Ω–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥`);
    console.log(`   GET    /api/sessions                   - —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π`);
    console.log(`   GET    /api/sessions/:id/status        - —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ (—Å –∏–Ω—Ñ–æ –æ –±–∞—Ç—á–∞—Ö)`);
    console.log(`   GET    /api/sessions/:id/data          - –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å–∏–Ω–≥–∞`);
    console.log(`   GET    /api/sessions/:id/stats         - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞`);
    console.log(`   GET    /api/sessions/:id/export?format=csv|json - —ç–∫—Å–ø–æ—Ä—Ç`);
    console.log(`   POST   /api/sessions/:id/continue      - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ (–±–∞—Ç—á –ø–æ 500)`);
    console.log(`   DELETE /api/sessions/:id               - —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é`);
    console.log(`\n‚ö° –ù–û–í–û–ï: –ü–∞—Ä—Å–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ 500 –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –∑–∞—Ç–µ–º –ø–∞—É–∑–∏—Ä—É–µ—Ç!`);
    console.log(`   1. –ù–∞—á–Ω–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥: POST /api/parse`);
    console.log(`   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: GET /api/sessions/:id/status`);
    console.log(`   3. –ü—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ "paused" –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ: POST /api/sessions/:id/continue`);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
process.on('SIGINT', () => {
    console.log('\n\nüëã Shutting down server...');
    server.close(() => {
        console.log('‚úÖ Server closed');
        process.exit(0);
    });
});

module.exports = app;
