/**
 * –ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–∞–±–ª–∏—Ü–∞–º
 */

const { Pool } = require('pg');
require('dotenv').config();

async function migrateDatabase() {
  let dbConfig = {};

  if (process.env.DATABASE_URL) {
    dbConfig = {
      connectionString: process.env.DATABASE_URL,
      ssl: process.env.DB_SSL === 'true' ? { rejectUnauthorized: false } : false
    };
  } else {
    dbConfig = {
      host: process.env.DB_HOST || 'localhost',
      port: process.env.DB_PORT || 5432,
      user: process.env.DB_USER || 'postgres',
      password: process.env.DB_PASSWORD || '',
      database: process.env.DB_NAME || 'autonomera777',
      ssl: process.env.DB_SSL === 'true' ? { rejectUnauthorized: false } : false
    };
  }

  const pool = new Pool(dbConfig);
  const client = await pool.connect();

  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ë–î...');

    // 1. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ listings
    console.log('  ‚îú‚îÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É listings...');
    await client.query(`
      ALTER TABLE listings
      ADD COLUMN IF NOT EXISTS updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
    `);
    console.log('  ‚îú‚îÄ ‚úì –ö–æ–ª–æ–Ω–∫–∞ updated_at –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ)');

    await client.query(`
      ALTER TABLE listings
      ADD COLUMN IF NOT EXISTS parsed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
    `);
    console.log('  ‚îú‚îÄ ‚úì –ö–æ–ª–æ–Ω–∫–∞ parsed_at –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ)');

    await client.query(`
      ALTER TABLE listings
      ADD COLUMN IF NOT EXISTS date_posted TIMESTAMP;
    `);
    console.log('  ‚îú‚îÄ ‚úì –ö–æ–ª–æ–Ω–∫–∞ date_posted –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ)');

    await client.query(`
      ALTER TABLE listings
      ADD COLUMN IF NOT EXISTS date_updated TIMESTAMP;
    `);
    console.log('  ‚îú‚îÄ ‚úì –ö–æ–ª–æ–Ω–∫–∞ date_updated –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ)');

    // 2. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã (IF NOT EXISTS –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –æ—à–∏–±–æ–∫)
    console.log('  ‚îú‚îÄ –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è listings...');
    await client.query(`
      CREATE INDEX IF NOT EXISTS idx_listings_region ON listings(region);
      CREATE INDEX IF NOT EXISTS idx_listings_status ON listings(status);
      CREATE INDEX IF NOT EXISTS idx_listings_price ON listings(price);
      CREATE INDEX IF NOT EXISTS idx_listings_updated_at ON listings(updated_at);
      CREATE INDEX IF NOT EXISTS idx_listings_parsed_at ON listings(parsed_at);
    `);
    console.log('  ‚îú‚îÄ ‚úì –ò–Ω–¥–µ–∫—Å—ã listings –≥–æ—Ç–æ–≤—ã');

    // 3. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É parse_sessions –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    console.log('  ‚îú‚îÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É parse_sessions...');
    await client.query(`
      CREATE TABLE IF NOT EXISTS parse_sessions (
        id VARCHAR(36) PRIMARY KEY,
        started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        completed_at TIMESTAMP NULL,
        status VARCHAR(50) DEFAULT 'running',
        total_items INTEGER DEFAULT 0,
        new_items INTEGER DEFAULT 0,
        updated_items INTEGER DEFAULT 0,
        params JSONB,
        error TEXT
      );
    `);
    console.log('  ‚îú‚îÄ ‚úì –¢–∞–±–ª–∏—Ü–∞ parse_sessions –≥–æ—Ç–æ–≤–∞');

    await client.query(`
      CREATE INDEX IF NOT EXISTS idx_sessions_status ON parse_sessions(status);
      CREATE INDEX IF NOT EXISTS idx_sessions_started_at ON parse_sessions(started_at);
    `);

    // 4. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É listing_history –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    console.log('  ‚îú‚îÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É listing_history...');
    await client.query(`
      CREATE TABLE IF NOT EXISTS listing_history (
        id SERIAL PRIMARY KEY,
        number VARCHAR(15) NOT NULL,
        old_price INTEGER,
        new_price INTEGER,
        price_delta INTEGER,
        change_direction VARCHAR(20),
        date_updated_site TIMESTAMP,
        is_price_changed BOOLEAN DEFAULT FALSE,
        recorded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        session_id VARCHAR(36)
      );
    `);
    console.log('  ‚îú‚îÄ ‚úì –¢–∞–±–ª–∏—Ü–∞ listing_history –≥–æ—Ç–æ–≤–∞');

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
    await client.query(`
      CREATE INDEX IF NOT EXISTS idx_listing_history_number ON listing_history(number);
      CREATE INDEX IF NOT EXISTS idx_listing_history_recorded_at ON listing_history(recorded_at);
      CREATE INDEX IF NOT EXISTS idx_listing_history_session ON listing_history(session_id);
      CREATE INDEX IF NOT EXISTS idx_listing_history_date_updated ON listing_history(date_updated_site);
    `);

    // 5. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É price_history –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    console.log('  ‚îú‚îÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É price_history...');
    await client.query(`
      CREATE TABLE IF NOT EXISTS price_history (
        id SERIAL PRIMARY KEY,
        number VARCHAR(15) NOT NULL,
        old_price INTEGER,
        new_price INTEGER,
        price_delta INTEGER,
        change_direction VARCHAR(20),
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        session_id VARCHAR(36)
      );
    `);
    console.log('  ‚îú‚îÄ ‚úì –¢–∞–±–ª–∏—Ü–∞ price_history –≥–æ—Ç–æ–≤–∞');

    await client.query(`
      CREATE INDEX IF NOT EXISTS idx_price_history_number ON price_history(number);
      CREATE INDEX IF NOT EXISTS idx_price_history_updated_at ON price_history(updated_at);
      CREATE INDEX IF NOT EXISTS idx_price_history_session ON price_history(session_id);
    `);

    // 6. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É cron_logs –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    console.log('  ‚îú‚îÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É cron_logs...');
    await client.query(`
      CREATE TABLE IF NOT EXISTS cron_logs (
        id SERIAL PRIMARY KEY,
        scheduled_time TIMESTAMP,
        started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        completed_at TIMESTAMP NULL,
        status VARCHAR(50) DEFAULT 'running',
        items_processed INTEGER DEFAULT 0,
        error TEXT
      );
    `);
    console.log('  ‚îî‚îÄ ‚úì –¢–∞–±–ª–∏—Ü–∞ cron_logs –≥–æ—Ç–æ–≤–∞');

    await client.query(`
      CREATE INDEX IF NOT EXISTS idx_cron_started_at ON cron_logs(started_at);
      CREATE INDEX IF NOT EXISTS idx_cron_status ON cron_logs(status);
    `);

    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ë–î —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('   –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∏–Ω–¥–µ–∫—Å—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ\n');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
    if (error.code === '42703') {
      console.error('   (–ö–æ–ª–æ–Ω–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)');
    }
    throw error;
  } finally {
    client.release();
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  migrateDatabase()
    .then(() => {
      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
      process.exit(1);
    });
}

module.exports = { migrateDatabase };
