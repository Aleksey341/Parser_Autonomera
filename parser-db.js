/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞ —Å MySQL –ë–î
 */

const db = require('./db');
require('dotenv').config();

class ParserDBAdapter {
  constructor(parser) {
    this.parser = parser;
    this.sessionId = null;
    this.newItemsCount = 0;
    this.updatedItemsCount = 0;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –ë–î
   */
  async startSession(params = {}) {
    const { v4: uuidv4 } = require('uuid') || { v4: () => `${Date.now()}-${Math.random()}` };
    this.sessionId = params.sessionId || `parse-${Date.now()}`;

    await db.createParseSession(this.sessionId, {
      minPrice: this.parser.minPrice,
      maxPrice: this.parser.maxPrice,
      maxPages: this.parser.maxPages,
      region: this.parser.region,
      ...params
    });

    console.log(`üìù –°–µ—Å—Å–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω–∞: ${this.sessionId}`);
    return this.sessionId;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –ë–î —Å –ø–æ–ª–Ω—ã–º –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–Ω–∏–µ–º
   */
  async saveListingsToDB() {
    if (!this.parser.listings || this.parser.listings.length === 0) {
      console.log('‚ö†Ô∏è  –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return { newItems: 0, updatedItems: 0 };
    }

    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è—é ${this.parser.listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –ë–î...`);

    this.newItemsCount = 0;
    this.updatedItemsCount = 0;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±–∞—Ç—á–∞–º–∏ –ø–æ 100
    const batchSize = 100;
    for (let i = 0; i < this.parser.listings.length; i += batchSize) {
      const batch = this.parser.listings.slice(i, i + batchSize);

      for (const listing of batch) {
        const success = await db.insertOrUpdateListing({
          number: listing.number,
          price: listing.price || 0,
          region: listing.region || '',
          status: listing.status || 'active',
          datePosted: listing.datePosted ? this.normalizeDate(listing.datePosted) : null,
          dateUpdated: listing.dateUpdated ? this.normalizeDate(listing.dateUpdated) : null,
          seller: listing.seller || 'unknown',
          url: listing.url || ''
        });

        if (success) {
          if (i === 0) {
            this.newItemsCount++;
          } else {
            this.updatedItemsCount++;
          }
        }
      }

      // –ö–∞–∂–¥—ã–µ 500 –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      if ((i + batchSize) % 500 === 0) {
        console.log(`‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${Math.min(i + batchSize, this.parser.listings.length)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
      }
    }

    console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${this.parser.listings.length}`);
    console.log(`   - –ù–æ–≤—ã—Ö: ${this.newItemsCount}`);
    console.log(`   - –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${this.updatedItemsCount}`);

    return {
      newItems: this.newItemsCount,
      updatedItems: this.updatedItemsCount,
      total: this.parser.listings.length
    };
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –ë–î —Å –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
   */
  async saveDifferentialListingsToDB() {
    if (!this.parser.listings || this.parser.listings.length === 0) {
      console.log('‚ö†Ô∏è  –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return {
        newItems: 0,
        updatedItems: 0,
        unchangedItems: 0,
        newListings: [],
        priceChanges: []
      };
    }

    console.log(`üîÑ –í—ã–ø–æ–ª–Ω—è—é –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ ${this.parser.listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π...`);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const diffResult = await db.getDifferentialListings(
      this.parser.listings.map(l => ({
        number: l.number,
        price: l.price || 0,
        region: l.region || '',
        status: l.status || 'active',
        datePosted: l.datePosted ? this.normalizeDate(l.datePosted) : null,
        dateUpdated: l.dateUpdated ? this.normalizeDate(l.dateUpdated) : null,
        seller: l.seller || 'unknown',
        url: l.url || ''
      })),
      this.sessionId
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è—é ${diffResult.newListings.length} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π...`);
    for (const listing of diffResult.newListings) {
      await db.insertOrUpdateListing(listing);
      this.newItemsCount++;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    this.updatedItemsCount = diffResult.statistics.updatedCount;

    console.log(`‚úÖ –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:`);
    console.log(`   - –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${this.newItemsCount}`);
    console.log(`   - –ò–∑–º–µ–Ω–µ–Ω—ã —Ü–µ–Ω—ã: ${this.updatedItemsCount}`);
    console.log(`   - –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${diffResult.statistics.unchangedCount}`);

    return {
      newItems: this.newItemsCount,
      updatedItems: this.updatedItemsCount,
      unchangedItems: diffResult.statistics.unchangedCount,
      newListings: diffResult.newListings,
      priceChanges: diffResult.priceChanges,
      statistics: diffResult.statistics
    };
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞
   */
  async completeSession(error = null) {
    if (!this.sessionId) return;

    const data = {
      status: error ? 'failed' : 'completed',
      totalItems: this.parser.listings.length,
      newItems: this.newItemsCount,
      updatedItems: this.updatedItemsCount
    };

    if (error) {
      data.error = error.message || String(error);
    }

    await db.updateParseSession(this.sessionId, data);
    console.log(`üìä –°–µ—Å—Å–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${data.status}`);
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –ë–î
   */
  normalizeDate(dateStr) {
    if (!dateStr) return null;

    // –ï—Å–ª–∏ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –∏–ª–∏ YYYY-MM-DD HH:MM:SS
    if (/^\d{4}-\d{2}-\d{2}/.test(dateStr)) {
      return dateStr.substring(0, 19); // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    }

    // –ï—Å–ª–∏ —ç—Ç–æ ISO —Å—Ç—Ä–æ–∫–∞
    if (dateStr.includes('T')) {
      const date = new Date(dateStr);
      return this.formatDate(date);
    }

    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä—É—Å—Å–∫–∏–µ –¥–∞—Ç—ã –∏ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
    try {
      const date = new Date(dateStr);
      if (!isNaN(date.getTime())) {
        return this.formatDate(date);
      }
    } catch (e) {
      // Ignore
    }

    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    return null;
  }

  formatDate(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const seconds = String(date.getSeconds()).padStart(2, '0');
    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î (–ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
 */
async function runParserWithDB(parserInstance, sessionId = null) {
  const adapter = new ParserDBAdapter(parserInstance);

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
    await parserInstance.initBrowser();

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    await adapter.startSession({ sessionId });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...');
    const result = await parserInstance.parse();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î
    await adapter.saveListingsToDB();

    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
    await adapter.completeSession();

    return {
      success: true,
      sessionId: adapter.sessionId,
      items: parserInstance.listings.length,
      ...result
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ:', error.message);
    await adapter.completeSession(error);

    return {
      success: false,
      sessionId: adapter.sessionId,
      error: error.message
    };
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    await parserInstance.closeBrowser();
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è)
 */
async function runDifferentialParserWithDB(parserInstance, sessionId = null) {
  const adapter = new ParserDBAdapter(parserInstance);

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
    await parserInstance.initBrowser();

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    await adapter.startSession({ sessionId });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥...');
    const result = await parserInstance.parse();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î —Å –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
    const diffResult = await adapter.saveDifferentialListingsToDB();

    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
    await adapter.completeSession();

    return {
      success: true,
      sessionId: adapter.sessionId,
      totalParsed: parserInstance.listings.length,
      newItems: diffResult.newItems,
      updatedItems: diffResult.updatedItems,
      unchangedItems: diffResult.unchangedItems,
      newListings: diffResult.newListings,
      priceChanges: diffResult.priceChanges,
      ...result
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ:', error.message);
    await adapter.completeSession(error);

    return {
      success: false,
      sessionId: adapter.sessionId,
      error: error.message
    };
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    await parserInstance.closeBrowser();
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 */
async function scheduledParseTask(parserOptions = {}) {
  const AutonomeraParser = require('./parser');

  console.log('\n' + '='.repeat(60));
  console.log('üïê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–•');
  console.log('='.repeat(60));
  console.log(`‚è∞ ${new Date().toLocaleString('ru-RU')}`);

  try {
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ .env
    const parser = new AutonomeraParser({
      maxPages: parseInt(process.env.MAX_PAGES || '50'),
      minPrice: parseInt(process.env.MIN_PRICE || '0'),
      maxPrice: parseInt(process.env.MAX_PRICE || '999999999'),
      concurrentRequests: parseInt(process.env.CONCURRENT_REQUESTS || '500'),
      requestDelayMs: parseInt(process.env.REQUEST_DELAY || '1000'),
      timeout: parseInt(process.env.REQUEST_TIMEOUT || '40000'),
      ...parserOptions
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
    const result = await runParserWithDB(parser);

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
    console.log(`   –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${result.items}`);
    console.log(`   –£—Å–ø–µ—à–Ω–æ: ${result.success ? '–î–ê' : '–ù–ï–¢'}`);
    if (result.error) {
      console.log(`   –û—à–∏–±–∫–∞: ${result.error}`);
    }

    return result;
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error);
    return { success: false, error: error.message };
  }
}

module.exports = {
  ParserDBAdapter,
  runParserWithDB,
  runDifferentialParserWithDB,
  scheduledParseTask
};
