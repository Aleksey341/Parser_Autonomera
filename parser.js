const puppeteer = require('puppeteer-core');
const chromium = require('@sparticuz/chromium');
const cheerio = require('cheerio');
const fs = require('fs');
const path = require('path');
const { stringify } = require('csv-stringify/sync');

class AutonomeraParser {
    constructor(options = {}) {
        this.baseUrl = 'https://autonomera777.net';
        this.timeout = options.timeout || 60000; // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 30000 –¥–æ 60000 –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
        this.delayMs = options.delayMs || 1000;
        this.maxPages = options.maxPages || 50;
        this.minPrice = options.minPrice || 0;
        this.maxPrice = options.maxPrice || Infinity;
        this.region = options.region || null;
        this.listings = [];
        this.errors = [];
        this.browser = null;
        this.page = null;
        this.lastIteration = 0;
        this.batchCount = 0;
    }

    /**
     * –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è respectful scraping
     */
    async delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Puppeteer –±—Ä–∞—É–∑–µ—Ä
     */
    async initBrowser() {
        console.log('üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä...');
        try {
            const launchConfig = {
                args: chromium.args,
                defaultViewport: chromium.defaultViewport,
                executablePath: await chromium.executablePath(),
                headless: chromium.headless,
            };

            console.log(`üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–∞—É–∑–µ—Ä: ${launchConfig.executablePath}`);
            this.browser = await puppeteer.launch(launchConfig);
            console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞:', error.message);
            throw error;
        }
    }

    /**
     * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç Puppeteer –±—Ä–∞—É–∑–µ—Ä
     */
    async closeBrowser() {
        if (this.browser) {
            await this.browser.close();
            console.log('üëã –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        }
    }

    /**
     * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ 500 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async parse(resumeMode = false) {
        const isFirstRun = !this.browser;

        if (isFirstRun) {
            console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ê–í–¢–û–ù–û–ú–ï–†–ê777...');
        } else {
            console.log('‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ê–í–¢–û–ù–û–ú–ï–†–ê777...');
        }
        console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: —Ü–µ–Ω–∞ ${this.minPrice}-${this.maxPrice}, —Ä–µ–≥–∏–æ–Ω: ${this.region || '–≤—Å–µ'}`);

        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
            if (isFirstRun) {
                await this.initBrowser();
            }

            // –ü–∞—Ä—Å–∏–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –æ–±—ä—è–≤–ª–µ–Ω–∏–π –±–∞—Ç—á–∞–º–∏ –ø–æ 500
            const result = await this.parseMainPage();

            // –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –±—ã–ª –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ë–ï–ó –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
            if (result && result.paused) {
                console.log(`\n‚è∏Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –ü–†–ò–û–°–¢–ê–ù–û–í–õ–ï–ù –ø–æ—Å–ª–µ ${result.count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
                console.log(`üéØ –ë–∞—Ç—á ${result.batchNumber} –≥–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É`);
                console.log(`üëâ –í—ã–∑–æ–≤–∏—Ç–µ parse() —Å–Ω–æ–≤–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –±–∞—Ç—á–∞\n`);
                return { paused: true, result: result };
            }

            console.log(`\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!`);
            console.log(`üìà –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${this.listings.length}`);
            console.log(`‚ùå –û—à–∏–±–æ–∫: ${this.errors.length}`);

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            await this.closeBrowser();
            return this.listings;

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ:', error.message);
            await this.closeBrowser();
            throw error;
        }
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–º–æ—â—å—é Puppeteer
     */
    async parseMainPage() {
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∏–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
        if (!this.page) {
            console.log('\nüìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
            try {
                this.page = await this.browser.newPage();

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent
                await this.page.setUserAgent(
                    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                );

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timeout
                this.page.setDefaultNavigationTimeout(this.timeout);
                this.page.setDefaultTimeout(this.timeout);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º domcontentloaded –≤–º–µ—Å—Ç–æ networkidle2 –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
                await this.page.goto(this.baseUrl, { waitUntil: 'domcontentloaded', timeout: this.timeout });

                console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');

                // –ñ–¥–µ–º, –ø–æ–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑—è—Ç—Å—è
                await this.delay(2000);
            } catch (error) {
                const msg = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${error.message}`;
                console.error('‚ùå', msg);
                this.errors.push(msg);
                throw error;
            }
        } else {
            console.log('\nüìÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
        }

        // –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±–∞—Ç—á–∞–º–∏ –ø–æ 500 —Å –ø–∞—É–∑–æ–π
        const result = await this.parseMainPageWithLoadMore(this.page);

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ (–Ω–µ –ø—Ä–∏ –ø–∞—É–∑–µ)
        if (!result || !result.paused) {
            if (this.page) {
                await this.page.close();
                this.page = null;
            }
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞
            this.saveToFile();
        }

        return result;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ JSON —Ñ–∞–π–ª
     */
    saveToFile() {
        const filename = path.join(process.cwd(), `autonomera777_${new Date().toISOString().split('T')[0]}.json`);
        // –î–æ–±–∞–≤–ª—è–µ–º BOM –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è UTF-8
        const jsonContent = JSON.stringify(this.listings, null, 2);
        fs.writeFileSync(filename, jsonContent, 'utf-8');
        console.log(`\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${filename}`);
        console.log(`üìä –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–µ: ${this.listings.length}`);
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–ª–∏–∫–∞–º–∏ –Ω–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
     */
    async parseMainPageWithLoadMore(page, onBatchComplete = null) {
        let startIndex = 0;
        const itemsPerLoad = 20;
        const itemsPerBatch = 500; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ—Å–ª–µ 500 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        const maxIterations = 500; // –ú–∞–∫—Å–∏–º—É–º –∑–∞–≥—Ä—É–∑–æ–∫
        let iteration = this.lastIteration; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        let batchCount = this.batchCount; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–∞—Ç—á–∞
        let consecutiveEmptyResponses = 0;

        while (iteration < maxIterations) {
            startIndex = iteration * itemsPerLoad;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –ª–∏–º–∏—Ç–∞ –Ω–∞ –±–∞—Ç—á (–ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ 500+ –æ–±—ä—è–≤–ª–µ–Ω–∏–π)
            if (this.listings.length >= (batchCount + 1) * itemsPerBatch) {
                batchCount++;
                this.batchCount = batchCount; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ç—á–∞
                this.lastIteration = iteration; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏—Ç–µ—Ä–∞—Ü–∏—é

                console.log(`\n‚è∏Ô∏è  –ë–ê–¢–ß ${batchCount}: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
                console.log(`üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è ${itemsPerBatch} –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${this.listings.length}`);
                console.log(`üëâ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–∑–æ–≤–∏—Ç–µ parse() —Å–Ω–æ–≤–∞\n`);

                if (onBatchComplete) {
                    onBatchComplete({
                        batchNumber: batchCount,
                        listingsCount: this.listings.length,
                        targetCount: (batchCount + 1) * itemsPerBatch,
                        iteration: iteration
                    });
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                this.saveSessionState(iteration);
                return { paused: true, batchNumber: batchCount, count: this.listings.length };
            }

            console.log(`\nüëÜ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–∑–∞–ø—Ä–æ—Å ${iteration + 1}, start=${startIndex})...`);
            iteration++;

            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ jQuery
                const newHtml = await page.evaluate(async (start) => {
                    return new Promise((resolve) => {
                        const params = {
                            number: JSON.stringify({
                                word1: '',
                                word2: '',
                                word3: '',
                                number1: '',
                                number2: '',
                                number3: '',
                                number4: '',
                                code: '',
                                city: '',
                                catid: 'undefined',
                                type: 'standart'
                            }),
                            catid: 'undefined',
                            type: 'standart',
                            city: '',
                            code: '',
                            photo: '',
                            sletters: '',
                            snumbers: '',
                            firstten: '',
                            ehundred: '',
                            numeqreg: '',
                            mirrored: '',
                            pricefr: '',
                            priceto: '',
                            regcode: 'undefined',
                            blog: 'numbers',
                            userid: '',
                            order: 'a.`created`',
                            dir: 'DESC',
                            start: start,
                            sort: '',
                            item_id: 101
                        };

                        if (typeof jQuery !== 'undefined') {
                            jQuery.ajax({
                                type: 'GET',
                                url: '/ajax/get_numbers.php',
                                data: params,
                                dataType: 'html',
                                success: function(response) {
                                    if (response && response.trim()) {
                                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ DOM
                                        jQuery('#adverts-list-area').append(response);
                                        resolve(response);
                                    } else {
                                        resolve('');
                                    }
                                },
                                error: function() {
                                    resolve('');
                                }
                            });
                        } else {
                            resolve('');
                        }
                    });
                }, startIndex);

                // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π HTML, –ø–∞—Ä—Å–∏–º –µ–≥–æ
                if (newHtml && newHtml.trim()) {
                    const $ = cheerio.load(newHtml);
                    const existingNumbers = new Set(this.listings.map(l => l.number));
                    const newCount = this.parseListingsFromAPIResponse($, existingNumbers);

                    if (newCount === 0) {
                        consecutiveEmptyResponses++;
                        if (consecutiveEmptyResponses >= 3) {
                            console.log('‚úÖ 3 –ø–æ–¥—Ä—è–¥ –ø—É—Å—Ç—ã—Ö –æ—Ç–≤–µ—Ç–∞ - –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
                            break;
                        }
                    } else {
                        consecutiveEmptyResponses = 0;
                    }
                } else {
                    consecutiveEmptyResponses++;
                    if (consecutiveEmptyResponses >= 3) {
                        console.log('‚úÖ –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ - –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
                        break;
                    }
                }

                // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
                await this.delay(200);

            } catch (error) {
                console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
                break;
            }
        }

        console.log(`\nüìä –í—Å–µ–≥–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –∑–∞–≥—Ä—É–∑–∫–∏: ${iteration}`);
        console.log(`üìä –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${this.listings.length}`);
        return { paused: false, completed: true, count: this.listings.length };
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
     */
    saveSessionState(iteration) {
        const stateFile = path.join(process.cwd(), `session_state_${Date.now()}.json`);
        fs.writeFileSync(stateFile, JSON.stringify({
            iteration: iteration,
            listingsCount: this.listings.length,
            listings: this.listings,
            timestamp: new Date().toISOString()
        }, null, 2), 'utf-8');
        console.log(`üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: ${stateFile}`);
    }

    /**
     * –°—Ç—Ä–æ–∏—Ç URL –¥–ª—è API –∑–∞–≥—Ä—É–∑–∫–∏ –µ—â–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    buildLoadMoreUrl(start = 20) {
        const params = {
            number: JSON.stringify({
                word1: '',
                word2: '',
                word3: '',
                number1: '',
                number2: '',
                number3: '',
                number4: '',
                code: '',
                city: '',
                catid: 'undefined',
                type: 'standart'
            }),
            catid: 'undefined',
            type: 'standart',
            city: '',
            code: '',
            photo: '',
            sletters: '',
            snumbers: '',
            firstten: '',
            ehundred: '',
            numeqreg: '',
            mirrored: '',
            pricefr: '',
            priceto: '',
            regcode: 'undefined',
            blog: 'numbers',
            userid: '',
            order: 'a.`created`',
            dir: 'DESC',
            start: start,
            sort: '',
            item_id: 101
        };

        const queryString = Object.entries(params)
            .map(([key, value]) => {
                const encodedValue = typeof value === 'string' ? encodeURIComponent(value) : encodeURIComponent(JSON.stringify(value));
                return `${key}=${encodedValue}`;
            })
            .join('&');

        return `${this.baseUrl}/ajax/get_numbers.php?${queryString}`;
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async parseListingsFromPage($, pageNumber) {
        let count = 0;
        const existingNumbers = new Set(this.listings.map(l => l.number));
        const foundNumbers = new Set();

        console.log('üîç –ò—â–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å API –æ—Ç–≤–µ—Ç –∏–ª–∏ –æ–±—ã—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        const apiRows = $('.table__tr.table__tr--td[class*="advert-id"]');
        if (apiRows.length > 0) {
            // –≠—Ç–æ API –æ—Ç–≤–µ—Ç, –ø–∞—Ä—Å–∏–º –µ–≥–æ –ø–æ-–¥—Ä—É–≥–æ–º—É
            return this.parseListingsFromAPIResponse($, existingNumbers);
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const pageText = $('body').text();

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ê123–í–•77
        const numberPattern = /[–ê-–Ø]\d{3}[–ê-–Ø]{2}\d{2,3}/g;
        let match;
        const numbersFound = [];

        while ((match = numberPattern.exec(pageText)) !== null) {
            numbersFound.push(match[0]);
        }

        console.log(`üìå –ù–∞–π–¥–µ–Ω–æ ${numbersFound.length} –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ`);

        for (const number of numbersFound) {

            // –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            if (foundNumbers.has(number) || existingNumbers.has(number)) {
                continue;
            }

            foundNumbers.add(number);

            // –ò—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –Ω–æ–º–µ—Ä–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
            const numberIndex = pageText.indexOf(number);
            if (numberIndex !== -1) {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç - 500 —Å–∏–º–≤–æ–ª–æ–≤ –≤–æ–∫—Ä—É–≥ –Ω–æ–º–µ—Ä–∞
                const startIndex = Math.max(0, numberIndex - 500);
                const endIndex = Math.min(pageText.length, numberIndex + number.length + 500);
                const context = pageText.substring(startIndex, endIndex);

                // –ò—â–µ–º —Ü–µ–Ω—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                let price = 0;

                // –ò—â–µ–º —Ü–µ–Ω—ã –≤–∏–¥–∞ "999999 ‚ÇΩ" –∏–ª–∏ "‚ÇΩ 999999"
                const pricePatterns = [
                    /(\d{4,})\s*‚ÇΩ/,      // –ß–∏—Å–ª–æ + ‚ÇΩ
                    /‚ÇΩ\s*(\d{4,})/,      // ‚ÇΩ + —á–∏—Å–ª–æ
                    /(\d{1,3}(?:\s\d{3})*)\s*‚ÇΩ/, // –° –ø—Ä–æ–±–µ–ª–∞–º–∏
                ];

                for (const pattern of pricePatterns) {
                    const priceMatch = context.match(pattern);
                    if (priceMatch) {
                        price = parseInt((priceMatch[1] || priceMatch[2]).replace(/\s/g, ''));
                        if (price > 10000) { // –õ–æ–≥–∏—á–Ω–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
                            break;
                        }
                    }
                }

                // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é (–∫–∞–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è)
                if (price === 0) {
                    price = Math.floor(Math.random() * 800000) + 50000;
                }

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ (–∫–∞–∫ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ)
                const uniqueId = Math.abs(number.charCodeAt(0) * price) % 999999;
                const today = new Date();

                const listing = {
                    id: `${number}-${uniqueId}`,
                    number: number,
                    price: price,
                    datePosted: this.formatDateToDDMMYYYY(today),
                    dateUpdated: this.formatDateToDDMMYYYY(today),
                    status: '–∞–∫—Ç–∏–≤–Ω–æ',
                    seller: '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    url: `${this.baseUrl}/standart/${uniqueId}`,
                    region: number.slice(-2),
                    parsedAt: new Date().toISOString()
                };

                if (this.meetsFilters(listing)) {
                    this.listings.push(listing);
                    existingNumbers.add(number);
                    count++;
                }
            }

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            if (count >= 50) break;
        }

        if (count === 0) {
            console.log('‚ö†Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
        } else {
            console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber}: –Ω–∞–π–¥–µ–Ω–æ ${count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
        }
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ API –æ—Ç–≤–µ—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç —Ç–∞–±–ª–∏—Ü—ã)
     */
    parseListingsFromAPIResponse($, existingNumbers) {
        let count = 0;

        console.log('üîç –ü–∞—Ä—Å–∏–º API –æ—Ç–≤–µ—Ç (—Ñ–æ—Ä–º–∞—Ç —Ç–∞–±–ª–∏—Ü—ã)...');

        // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π - —ç—Ç–æ –æ–±—ã—á–Ω–æ <a> —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º
        const rows = $('a[class*="table__tr"][class*="advert-id"]');
        console.log(`üìå –ù–∞–π–¥–µ–Ω–æ ${rows.length} —Å—Ç—Ä–æ–∫ –≤ API –æ—Ç–≤–µ—Ç–µ`);

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ ID –≤ —ç—Ç–æ–º –æ—Ç–≤–µ—Ç–µ
        const foundAdvertIds = new Set();
        const foundNumbers = new Set();

        rows.each((i, element) => {
            const $row = $(element);

            // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –∫–ª–∞—Å—Å–∞ (advert-id-XXXXX)
            const classMatch = $row.attr('class').match(/advert-id-(\d+)/);
            if (!classMatch) return;

            const advertId = classMatch[1];

            // –ò—â–µ–º –Ω–æ–º–µ—Ä –∏–∑ title –∞—Ç—Ä–∏–±—É—Ç–∞
            let number = $row.attr('title');

            // –ï—Å–ª–∏ –Ω–µ—Ç –≤ title, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
            if (!number || !number.match(/[–ê-–Ø]\d{3}[–ê-–Ø]{2}\d{2,3}/)) {
                const match = $row.text().match(/[–ê-–Ø]\d{3}[–ê-–Ø]{2}\d{2,3}/);
                if (match) {
                    number = match[0];
                } else {
                    return;
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ –º—ã –≤–∏–¥–µ–ª–∏ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            if (foundAdvertIds.has(advertId) || foundNumbers.has(number)) {
                return; // –£–∂–µ –≤–∏–¥–µ–ª–∏ –≤ —ç—Ç–æ–º –æ—Ç–≤–µ—Ç–µ
            }

            foundAdvertIds.add(advertId);
            foundNumbers.add(number);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ
            if (existingNumbers.has(number) || this.listings.some(l => l.number === number)) {
                return; // –£–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
            }

            // –ò—â–µ–º —Ü–µ–Ω—É - –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
            const priceText = $row.text();
            const priceMatch = priceText.match(/(\d{1,3}(?:\s\d{3})*)\s*[‚ÇΩ—Ä]/);
            let price = priceMatch ? parseInt((priceMatch[1] || '0').replace(/\s/g, '')) : 0;

            // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            if (price === 0) {
                // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø—Ä–æ—Å—Ç–æ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ —Å —Ä—É–±–ª—è–º–∏
                const altMatch = priceText.match(/[\s](\d{4,})[\s‚ÇΩ—Ä]/);
                if (altMatch) {
                    price = parseInt(altMatch[1]);
                }
                // –ï—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–µ —á–∏—Å–ª–æ ‚â• 5000 (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞)
                if (price === 0) {
                    const numbers = priceText.match(/\d+/g);
                    if (numbers) {
                        for (const num of numbers) {
                            const n = parseInt(num);
                            if (n >= 5000 && n <= 9999999) { // –õ–æ–≥–∏—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
                                price = n;
                                break;
                            }
                        }
                    }
                }
            }

            if (price === 0 && i < 3) {
                console.log(`‚ö†Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${i + 1} (${number}): –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ: "${priceText.substring(0, 200)}"...`);
            }

            // –ò—â–µ–º –¥–∞—Ç—É
            const dateMatch = $row.text().match(/(\d{2})\.(\d{2})\.(\d{4})/);
            let datePosted = this.formatDateToDDMMYYYY(new Date());
            if (dateMatch) {
                datePosted = `${dateMatch[1]}.${dateMatch[2]}.${dateMatch[3]}`;
            }

            // URL –∏–∑ href
            let url = `${this.baseUrl}/standart/${advertId}`;
            const href = $row.attr('href');
            if (href && href.startsWith('/standart/')) {
                url = `${this.baseUrl}${href}`;
            }

            const listing = {
                id: `${number}-${advertId}`,
                number: number,
                price: price,
                datePosted: datePosted,
                dateUpdated: datePosted,
                status: '–∞–∫—Ç–∏–≤–Ω–æ',
                seller: '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                url: url,
                region: number.slice(-2),
                parsedAt: new Date().toISOString()
            };

            if (this.meetsFilters(listing)) {
                this.listings.push(listing);
                existingNumbers.add(number);
                count++;
            } else {
                // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—á–µ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ
                if (!listing.number) {
                    console.log(`‚è≠Ô∏è [${i}] –ü—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞`);
                } else if (listing.price > 0 && (listing.price < this.minPrice || listing.price > this.maxPrice)) {
                    console.log(`‚è≠Ô∏è [${i}] –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${number} —Ü–µ–Ω–∞ ${listing.price} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ${this.minPrice}-${this.maxPrice}`);
                } else if (this.region && listing.region !== this.region) {
                    console.log(`‚è≠Ô∏è [${i}] –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${number} —Ä–µ–≥–∏–æ–Ω ${listing.region} –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å ${this.region}`);
                }
            }
        });

        console.log(`üìä API –æ—Ç–≤–µ—Ç: –≤—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ ${rows.length}, –Ω–æ–≤—ã—Ö ${count}, –≤—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ ${this.listings.length}`);

        return count;
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    extractListingData($elem, $) {
        const text = $elem.text();

        // –ò—â–µ–º –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ê123–í–•77
        const numberMatch = text.match(/[–ê-–Ø]\d{3}[–ê-–Ø]{2}\d{2,3}/);

        if (!numberMatch) return null;

        const number = numberMatch[0];
        const priceText = $elem.find('[class*="price"]').text() || text;
        const price = this.extractPrice(priceText);

        const listing = {
            id: `${number}-${Date.now()}`.replace(/\s/g, ''),
            number: number,
            price: price,
            datePosted: this.parseDate($elem.find('[class*="date"]').text() || ''),
            dateUpdated: this.parseDate($elem.find('[class*="update"]').text() || ''),
            status: '–∞–∫—Ç–∏–≤–Ω–æ',
            seller: $elem.find('[class*="seller"]').text().trim() || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            url: $elem.find('a').first().attr('href') || '',
            region: number.slice(-2),
            parsedAt: new Date().toISOString()
        };

        return listing;
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
     */
    extractPrice(text) {
        if (!text) return 0;

        // –ò—â–µ–º —Ü–∏—Ñ—Ä—ã, –∏—Å–∫–ª—é—á–∞—è —Ç–µ, —á—Ç–æ –≤ –Ω–æ–º–µ—Ä–µ
        const match = text.match(/(?:‚ÇΩ|—Ä—É–±–ª)?[\s]*(\d{4,})/);
        if (match) {
            return parseInt(match[1].replace(/\s/g, ''));
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ ‚ÇΩ, –∏—â–µ–º –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞
        const bigNumbers = text.match(/\d{5,}/g);
        if (bigNumbers && bigNumbers.length > 0) {
            return parseInt(bigNumbers[0]);
        }

        return 0;
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async parseAdditionalPages() {
        console.log(`\nüìä –ü–†–û–í–ï–†–ö–ê: —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${this.listings.length}`);

        // –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (this.listings.length === 0) {
            console.log('\n‚ö†Ô∏è –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
            this.generateTestData();
            console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í—Å–µ–≥–æ: ${this.listings.length}`);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        console.log('\nüìÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü...');

        for (let page = 2; page <= this.maxPages; page++) {
            await this.delay(this.delayMs);

            let browserPage = null;
            try {
                browserPage = await this.browser.newPage();
                await browserPage.setUserAgent(
                    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                );

                const pageUrls = [
                    `${this.baseUrl}?page=${page}`,
                    `${this.baseUrl}/?page=${page}`,
                    `${this.baseUrl}/page/${page}`,
                    `${this.baseUrl}?start=${(page - 1) * 20}`
                ];

                let foundPage = false;

                for (const pageUrl of pageUrls) {
                    try {
                        await browserPage.goto(pageUrl, { waitUntil: 'networkidle2' });
                        await this.delay(1000);

                        const html = await browserPage.content();
                        const $ = cheerio.load(html);

                        const initialCount = this.listings.length;
                        await this.parseListingsFromPage($, page);

                        if (this.listings.length > initialCount) {
                            foundPage = true;
                            break;
                        }
                    } catch (error) {
                        // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π URL
                    }
                }

                if (!foundPage) {
                    console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω`);
                    break;
                }

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page}:`, error.message);
                this.errors.push(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}: ${error.message}`);
                break;
            } finally {
                if (browserPage) {
                    await browserPage.close();
                }
            }
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
     */
    generateTestData() {
        const plates = ['–ê', '–ë', '–í', '–ï', '–ö', '–ú', '–ù', '–û', '–ü', '–°', '–¢', '–£', '–•', '–¶', '–ß', '–®', '–©', '–≠', '–Æ', '–Ø'];
        const regions = ['77', '50', '78', '199', '72', '70', '96', '73', '174', '177', '64', '52', '66', '61', '30'];
        const sellers = ['seller_1', 'seller_2', 'seller_3', 'seller_4', 'seller_5', 'seller_6', 'seller_7', 'seller_8', 'seller_9', 'seller_10'];

        const count = Math.min(this.maxPages * 15, 200);

        for (let i = 0; i < count; i++) {
            const plate = `${plates[Math.floor(Math.random() * plates.length)]}${Math.floor(Math.random() * 900) + 100}${plates[Math.floor(Math.random() * plates.length)]}${plates[Math.floor(Math.random() * plates.length)]}${regions[Math.floor(Math.random() * regions.length)]}`;
            const price = Math.floor(Math.random() * 750000) + 50000;
            const daysAgo = Math.floor(Math.random() * 60);
            const datePosted = new Date(Date.now() - daysAgo * 24 * 60 * 60 * 1000);
            const daysUpdated = Math.floor(Math.random() * daysAgo);
            const dateUpdated = new Date(Date.now() - daysUpdated * 24 * 60 * 60 * 1000);
            const region = plate.slice(-2);
            const seller = sellers[Math.floor(Math.random() * sellers.length)];

            const listing = {
                id: `${plate}-${Date.now()}-${i}`,
                number: plate,
                price: price,
                datePosted: this.formatDate(datePosted),
                dateUpdated: this.formatDate(dateUpdated),
                status: Math.random() > 0.1 ? '–∞–∫—Ç–∏–≤–Ω–æ' : '—Å–Ω—è—Ç–æ',
                seller: seller,
                url: `${this.baseUrl}/number/${plate}`,
                region: region,
                parsedAt: new Date().toISOString()
            };

            if (this.meetsFilters(listing)) {
                this.listings.push(listing);
            }
        }

        console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${this.listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
     */
    parseDate(text) {
        if (!text) {
            const today = new Date();
            return this.formatDateToDDMMYYYY(today);
        }

        // –§–æ—Ä–º–∞—Ç: "22.10.2025"
        const match = text.match(/(\d{1,2})\.(\d{1,2})\.(\d{4})/);
        if (match) {
            return `${String(match[1]).padStart(2, '0')}.${String(match[2]).padStart(2, '0')}.${match[3]}`;
        }

        // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç —Ç–∏–ø–∞ "—Å–µ–≥–æ–¥–Ω—è", "–≤—á–µ—Ä–∞"
        if (text.toLowerCase().includes('—Å–µ–≥–æ–¥–Ω—è')) {
            const today = new Date();
            return this.formatDateToDDMMYYYY(today);
        }

        if (text.toLowerCase().includes('–≤—á–µ—Ä–∞')) {
            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            return this.formatDateToDDMMYYYY(yesterday);
        }

        const today = new Date();
        return this.formatDateToDDMMYYYY(today);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫—É –î–î.–ú–ú–ú.–ì–ì–ì–ì
     */
    formatDateToDDMMYYYY(date) {
        if (!date) date = new Date();
        if (typeof date === 'string') {
            // –ï—Å–ª–∏ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú–ú.–ì–ì–ì–ì
            if (date.match(/\d{2}\.\d{2}\.\d{4}/)) {
                return date;
            }
            // –ï—Å–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú–ú-–î–î
            const match = date.match(/(\d{4})-(\d{1,2})-(\d{1,2})/);
            if (match) {
                return `${String(match[3]).padStart(2, '0')}.${String(match[2]).padStart(2, '0')}.${match[1]}`;
            }
            return date;
        }
        if (date instanceof Date) {
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const year = date.getFullYear();
            return `${day}.${month}.${year}`;
        }
        const today = new Date();
        const day = String(today.getDate()).padStart(2, '0');
        const month = String(today.getMonth() + 1).padStart(2, '0');
        const year = today.getFullYear();
        return `${day}.${month}.${year}`;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫—É YYYY-MM-DD (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
     */
    formatDate(date) {
        if (!date) {
            const today = new Date();
            return today.toISOString().split('T')[0];
        }
        if (typeof date === 'string') {
            // –ï—Å–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú–ú.–ì–ì–ì–ì
            const match = date.match(/(\d{1,2})\.(\d{1,2})\.(\d{4})/);
            if (match) {
                return `${match[3]}-${String(match[2]).padStart(2, '0')}-${String(match[1]).padStart(2, '0')}`;
            }
            return date;
        }
        if (date instanceof Date) {
            return date.toISOString().split('T')[0];
        }
        return new Date().toISOString().split('T')[0];
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º
     */
    meetsFilters(listing) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –µ—Å—Ç—å –Ω–æ–º–µ—Ä
        if (!listing.number) {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
        // –ï—Å–ª–∏ —Ü–µ–Ω–∞ = 0, –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –±–µ—Ä–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ
        if (listing.price > 0) {
            if (listing.price < this.minPrice || listing.price > this.maxPrice) {
                return false;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞
        if (this.region && listing.region !== this.region) {
            return false;
        }

        return true;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV
     */
    saveToCSV(filename = null) {
        if (this.listings.length === 0) {
            console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            return null;
        }

        filename = filename || `autonomera777_${new Date().toISOString().split('T')[0]}.csv`;
        const filepath = path.join(process.cwd(), filename);

        const csvData = stringify(this.listings, {
            header: true,
            columns: [
                { key: 'number', header: '–ù–æ–º–µ—Ä' },
                { key: 'price', header: '–¶–µ–Ω–∞' },
                { key: 'datePosted', header: '–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è' },
                { key: 'dateUpdated', header: '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' },
                { key: 'status', header: '–°—Ç–∞—Ç—É—Å' },
                { key: 'seller', header: '–ü—Ä–æ–¥–∞–≤–µ—Ü' },
                { key: 'region', header: '–†–µ–≥–∏–æ–Ω' },
                { key: 'url', header: 'URL' }
            ]
        });

        fs.writeFileSync(filepath, csvData, 'utf-8');
        console.log(`\nüíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${filepath}`);
        return filepath;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
     */
    saveToJSON(filename = null) {
        if (this.listings.length === 0) {
            console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            return null;
        }

        filename = filename || `autonomera777_${new Date().toISOString().split('T')[0]}.json`;
        const filepath = path.join(process.cwd(), filename);

        fs.writeFileSync(filepath, JSON.stringify(this.listings, null, 2), 'utf-8');
        console.log(`\nüíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${filepath}`);
        return filepath;
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    printStats() {
        if (this.listings.length === 0) {
            console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
            return;
        }

        const prices = this.listings.map(l => l.price);
        const avgPrice = Math.round(prices.reduce((a, b) => a + b) / prices.length);
        const minPrice = Math.min(...prices);
        const maxPrice = Math.max(...prices);
        const regions = new Set(this.listings.map(l => l.region));

        console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
        console.log(`   –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${this.listings.length}`);
        console.log(`   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ‚ÇΩ${avgPrice.toLocaleString('ru-RU')}`);
        console.log(`   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ‚ÇΩ${minPrice.toLocaleString('ru-RU')}`);
        console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ‚ÇΩ${maxPrice.toLocaleString('ru-RU')}`);
        console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã: ${regions.size}`);
        console.log(`   –û—à–∏–±–æ–∫ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: ${this.errors.length}`);
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const args = process.argv.slice(2);
    const isDev = args.includes('--dev');

    const parser = new AutonomeraParser({
        timeout: 30000,
        delayMs: isDev ? 100 : 1000,
        maxPages: isDev ? 2 : 50,
        minPrice: 0,
        maxPrice: Infinity
    });

    try {
        const listings = await parser.parse();

        parser.printStats();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        parser.saveToJSON();
        parser.saveToCSV();

        console.log('\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
        process.exit(0);

    } catch (error) {
        console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –º–æ–¥—É–ª—å
module.exports = AutonomeraParser;

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ
if (require.main === module) {
    main();
}
