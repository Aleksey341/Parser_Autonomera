const axios = require('axios');
const cheerio = require('cheerio');
const fs = require('fs');
const path = require('path');
const { stringify } = require('csv-stringify/sync');

class AutonomeraParser {
    constructor(options = {}) {
        this.baseUrl = 'https://autonomera777.net';
        this.timeout = options.timeout || 10000;
        this.delayMs = options.delayMs || 1000;
        this.maxPages = options.maxPages || 50;
        this.minPrice = options.minPrice || 0;
        this.maxPrice = options.maxPrice || Infinity;
        this.region = options.region || null;
        this.listings = [];
        this.errors = [];
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è axios —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º User-Agent
     */
    getAxiosConfig() {
        return {
            timeout: this.timeout,
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
        };
    }

    /**
     * –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è respectful scraping
     */
    async delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
     */
    async parse() {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ê–í–¢–û–ù–û–ú–ï–†–ê777...');
        console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: —Ü–µ–Ω–∞ ${this.minPrice}-${this.maxPrice}, —Ä–µ–≥–∏–æ–Ω: ${this.region || '–≤—Å–µ'}`);

        try {
            // –ü–∞—Ä—Å–∏–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await this.parseMainPage();

            // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—è - –ø–∞—Ä—Å–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await this.parseAdditionalPages();

            console.log(`\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!`);
            console.log(`üìà –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${this.listings.length}`);
            console.log(`‚ùå –û—à–∏–±–æ–∫: ${this.errors.length}`);

            return this.listings;

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ:', error.message);
            throw error;
        }
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
     */
    async parseMainPage() {
        console.log('\nüìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');

        try {
            const response = await axios.get(this.baseUrl, this.getAxiosConfig());
            const $ = cheerio.load(response.data);

            // –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            this.parseListingsTable($, 1);

        } catch (error) {
            const msg = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${error.message}`;
            console.error('‚ùå', msg);
            this.errors.push(msg);
        }
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç —Ç–∞–±–ª–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ HTML
     */
    parseListingsTable($, pageNumber) {
        let count = 0;

        // –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –Ω–æ–º–µ—Ä–∞–º–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
        // –ü–æ–ø—ã—Ç–∫–∞ 1: –ø–æ–∏—Å–∫ –ø–æ –∫–ª–∞—Å—Å–∞–º —Ç–∞–±–ª–∏—Ü—ã
        const rows = $('table tbody tr, .listings-table tbody tr, .numbers-list > tr');

        if (rows.length === 0) {
            console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã');
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ - –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            this.parseListingsAlternative($, pageNumber);
            return;
        }

        rows.each((index, element) => {
            try {
                const listing = this.parseListingRow($, element);
                if (listing && this.meetsFilters(listing)) {
                    this.listings.push(listing);
                    count++;
                }
            } catch (error) {
                console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ ${index + 1}:`, error.message);
            }
        });

        console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber}: –Ω–∞–π–¥–µ–Ω–æ ${count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
    }

    /**
     * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    parseListingsAlternative($, pageNumber) {
        console.log('üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞...');

        let count = 0;

        // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ —ç—Ç–æ –Ω–æ–º–µ—Ä–∞)
        const patterns = [
            { selector: 'a[href*="/number/"]', isList: false },
            { selector: '.listing-item', isList: false },
            { selector: '[data-listing-id]', isList: false },
            { selector: '.announcement', isList: false }
        ];

        for (const pattern of patterns) {
            const elements = $(pattern.selector);
            if (elements.length > 0) {
                console.log(`üìå –ù–∞–π–¥–µ–Ω–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: ${pattern.selector}`);

                elements.each((index, element) => {
                    try {
                        const $element = $(element);
                        const listing = this.parseListingElement($, $element);
                        if (listing && this.meetsFilters(listing)) {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —Ç–∞–∫–æ–π –Ω–æ–º–µ—Ä
                            if (!this.listings.find(l => l.number === listing.number)) {
                                this.listings.push(listing);
                                count++;
                            }
                        }
                    } catch (error) {
                        // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ
                    }
                });

                if (count > 0) break;
            }
        }

        if (count === 0) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è');
        }
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
     */
    parseListingRow($, element) {
        const $row = $(element);
        const cells = $row.find('td');

        if (cells.length < 4) return null;

        const datePosted = this.parseDate($(cells[0]).text());
        const numberText = $(cells[1]).text().trim();
        const priceText = $(cells[2]).text().trim();
        const seller = $(cells[3]).text().trim();

        // –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        const $link = $row.find('a[href*="/number/"], a[href*="–Ω–æ–º–µ—Ä"]');
        const url = $link.length > 0 ? this.baseUrl + $link.attr('href') : '';

        return {
            id: this.generateId(numberText),
            number: numberText,
            price: this.parsePrice(priceText),
            datePosted: datePosted,
            dateUpdated: datePosted, // –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –¥–∞—Ç–æ–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            status: '–∞–∫—Ç–∏–≤–Ω–æ',
            seller: seller,
            url: url,
            region: this.extractRegion(numberText),
            parsedAt: new Date().toISOString()
        };
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç —ç–ª–µ–º–µ–Ω—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)
     */
    parseListingElement($, $element) {
        const listing = {
            id: '',
            number: '',
            price: 0,
            datePosted: new Date().toISOString().split('T')[0],
            dateUpdated: new Date().toISOString().split('T')[0],
            status: '–∞–∫—Ç–∏–≤–Ω–æ',
            seller: '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            url: '',
            region: '',
            parsedAt: new Date().toISOString()
        };

        // –ù–æ–º–µ—Ä - –æ–±—ã—á–Ω–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –≤ href
        const $link = $element.find('a').first();
        if ($link.length > 0) {
            listing.number = $link.text().trim();
            listing.url = $link.attr('href');
            if (!listing.url.startsWith('http')) {
                listing.url = this.baseUrl + listing.url;
            }
        } else {
            listing.number = $element.text().trim();
        }

        // –¶–µ–Ω–∞
        const priceText = $element.find('[class*="price"]').text() ||
                         $element.attr('data-price') ||
                         '';
        listing.price = this.parsePrice(priceText);

        // –ü—Ä–æ–¥–∞–≤–µ—Ü
        const sellerText = $element.find('[class*="seller"]').text() ||
                          $element.attr('data-seller') ||
                          '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        listing.seller = sellerText.trim();

        // –î–∞—Ç–∞
        const dateText = $element.find('[class*="date"]').text() ||
                        $element.attr('data-date') ||
                        '';
        listing.datePosted = this.parseDate(dateText);

        // –†–µ–≥–∏–æ–Ω
        listing.region = this.extractRegion(listing.number);
        listing.id = this.generateId(listing.number);

        return listing;
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async parseAdditionalPages() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        console.log('\nüìÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü...');

        for (let page = 2; page <= this.maxPages; page++) {
            await this.delay(this.delayMs);

            try {
                // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã URL –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                const pageUrls = [
                    `${this.baseUrl}?page=${page}`,
                    `${this.baseUrl}/?page=${page}`,
                    `${this.baseUrl}/page/${page}`,
                    `${this.baseUrl}?start=${(page - 1) * 20}`
                ];

                let foundPage = false;

                for (const pageUrl of pageUrls) {
                    try {
                        const response = await axios.get(pageUrl, this.getAxiosConfig());
                        const $ = cheerio.load(response.data);

                        const initialCount = this.listings.length;
                        this.parseListingsTable($, page);

                        if (this.listings.length > initialCount) {
                            foundPage = true;
                            break;
                        }
                    } catch (error) {
                        // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π URL
                    }
                }

                if (!foundPage) {
                    console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω`);
                    break;
                }

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page}:`, error.message);
                this.errors.push(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}: ${error.message}`);
                break;
            }
        }
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç —Ü–µ–Ω—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
     */
    parsePrice(text) {
        const match = text.match(/(\d+[\s\d]*)/);
        if (match) {
            return parseInt(match[1].replace(/\s/g, ''));
        }
        return 0;
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
     */
    parseDate(text) {
        // –§–æ—Ä–º–∞—Ç: "22.10.2025"
        const match = text.match(/(\d{1,2})\.(\d{1,2})\.(\d{4})/);
        if (match) {
            return `${match[3]}-${match[2]}-${match[1]}`;
        }

        // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç —Ç–∏–ø–∞ "—Å–µ–≥–æ–¥–Ω—è", "–≤—á–µ—Ä–∞"
        if (text.toLowerCase().includes('—Å–µ–≥–æ–¥–Ω—è')) {
            const today = new Date();
            return today.toISOString().split('T')[0];
        }

        if (text.toLowerCase().includes('–≤—á–µ—Ä–∞')) {
            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            return yesterday.toISOString().split('T')[0];
        }

        // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –¥–∞—Ç–∞
        return new Date().toISOString().split('T')[0];
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ –Ω–æ–º–µ—Ä–∞
     */
    extractRegion(number) {
        // –ù–æ–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: –†550–í–•550
        // –†–µ–≥–∏–æ–Ω –æ–±—ã—á–Ω–æ –≤ –∫–æ–Ω—Ü–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2-3 —Ü–∏—Ñ—Ä—ã)
        const match = number.match(/(\d{2,3})$/);
        return match ? match[1] : '';
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
     */
    generateId(number) {
        return `${number}-${Date.now()}`.replace(/\s/g, '');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º
     */
    meetsFilters(listing) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã
        if (listing.price < this.minPrice || listing.price > this.maxPrice) {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞
        if (this.region && listing.region !== this.region) {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –µ—Å—Ç—å –Ω–æ–º–µ—Ä –∏ —Ü–µ–Ω–∞
        if (!listing.number || listing.price === 0) {
            return false;
        }

        return true;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV
     */
    saveToCSV(filename = null) {
        if (this.listings.length === 0) {
            console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            return null;
        }

        filename = filename || `autonomera777_${new Date().toISOString().split('T')[0]}.csv`;
        const filepath = path.join(process.cwd(), filename);

        const csvData = stringify(this.listings, {
            header: true,
            columns: [
                { key: 'number', header: '–ù–æ–º–µ—Ä' },
                { key: 'price', header: '–¶–µ–Ω–∞' },
                { key: 'datePosted', header: '–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è' },
                { key: 'dateUpdated', header: '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' },
                { key: 'status', header: '–°—Ç–∞—Ç—É—Å' },
                { key: 'seller', header: '–ü—Ä–æ–¥–∞–≤–µ—Ü' },
                { key: 'region', header: '–†–µ–≥–∏–æ–Ω' },
                { key: 'url', header: 'URL' }
            ]
        });

        fs.writeFileSync(filepath, csvData, 'utf-8');
        console.log(`\nüíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${filepath}`);
        return filepath;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
     */
    saveToJSON(filename = null) {
        if (this.listings.length === 0) {
            console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            return null;
        }

        filename = filename || `autonomera777_${new Date().toISOString().split('T')[0]}.json`;
        const filepath = path.join(process.cwd(), filename);

        fs.writeFileSync(filepath, JSON.stringify(this.listings, null, 2), 'utf-8');
        console.log(`\nüíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${filepath}`);
        return filepath;
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    printStats() {
        if (this.listings.length === 0) {
            console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
            return;
        }

        const prices = this.listings.map(l => l.price);
        const avgPrice = Math.round(prices.reduce((a, b) => a + b) / prices.length);
        const minPrice = Math.min(...prices);
        const maxPrice = Math.max(...prices);
        const regions = new Set(this.listings.map(l => l.region));

        console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
        console.log(`   –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${this.listings.length}`);
        console.log(`   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ‚ÇΩ${avgPrice.toLocaleString('ru-RU')}`);
        console.log(`   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ‚ÇΩ${minPrice.toLocaleString('ru-RU')}`);
        console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ‚ÇΩ${maxPrice.toLocaleString('ru-RU')}`);
        console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã: ${regions.size}`);
        console.log(`   –û—à–∏–±–æ–∫ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: ${this.errors.length}`);
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const args = process.argv.slice(2);
    const isDev = args.includes('--dev');

    const parser = new AutonomeraParser({
        timeout: 15000,
        delayMs: isDev ? 100 : 1000,
        maxPages: isDev ? 2 : 50,
        minPrice: 0,
        maxPrice: Infinity
    });

    try {
        const listings = await parser.parse();

        parser.printStats();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        parser.saveToJSON();
        parser.saveToCSV();

        console.log('\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
        process.exit(0);

    } catch (error) {
        console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –º–æ–¥—É–ª—å
module.exports = AutonomeraParser;

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ
if (require.main === module) {
    main();
}
