/**
 * –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 00:00)
 */

const cron = require('node-cron');
const db = require('./db');
const { scheduledParseTask } = require('./parser-db');
require('dotenv').config();

class ParsingScheduler {
  constructor() {
    this.job = null;
    this.isRunning = false;
    this.lastRun = null;
    this.nextRun = null;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
   */
  async initialize() {
    console.log('\n' + '='.repeat(60));
    console.log('üìÖ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê');
    console.log('='.repeat(60));

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ .env
    const parsingTime = process.env.PARSER_TIME || '00:00'; // 00:00 - –ø–æ–ª–Ω–æ—á—å
    const timezone = process.env.PARSER_TIMEZONE || 'Europe/Moscow';

    console.log(`‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${parsingTime}`);
    console.log(`üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${timezone}`);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç cron
    // "00:00" -> "0 0 * * *" (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ –ø–æ–ª–Ω–æ—á—å)
    const [hours, minutes] = parsingTime.split(':');
    const cronExpression = `${minutes} ${hours} * * *`;

    console.log(`üìã Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: ${cronExpression}`);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    this.job = cron.schedule(cronExpression, async () => {
      await this.executeParsingTask();
    }, {
      timezone: timezone,
      name: 'autonomera-parser-cron'
    });

    console.log('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω');
    this.updateNextRun(cronExpression);

    return this;
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –ø–∞—Ä—Å–∏–Ω–≥–∞
   */
  async executeParsingTask() {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è  –ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –∏—Ç–µ—Ä–∞—Ü–∏—é.');
      return;
    }

    this.isRunning = true;
    this.lastRun = new Date();

    try {
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ
      await this.logCronExecution('started');

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
      const result = await scheduledParseTask({
        maxPages: parseInt(process.env.MAX_PAGES || '50'),
        minPrice: parseInt(process.env.MIN_PRICE || '0'),
        maxPrice: parseInt(process.env.MAX_PRICE || '999999999'),
        concurrentRequests: parseInt(process.env.CONCURRENT_REQUESTS || '500'),
        requestDelayMs: parseInt(process.env.REQUEST_DELAY || '1000')
      });

      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      await this.logCronExecution('completed', {
        itemsCount: result.items,
        success: result.success
      });

      console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error.message);
      await this.logCronExecution('failed', {
        error: error.message
      });
    } finally {
      this.isRunning = false;
      this.updateNextRun();
    }
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ cron –∑–∞–¥–∞—á–∏ –≤ –ë–î
   */
  async logCronExecution(status, data = {}) {
    try {
      const pool = db.pool();
      const connection = await pool.getConnection();

      if (status === 'started') {
        await connection.execute(`
          INSERT INTO cron_logs (scheduledTime, status)
          VALUES (NOW(), 'running')
        `);
      } else if (status === 'completed') {
        await connection.execute(`
          UPDATE cron_logs
          SET status = 'completed',
              completedAt = NOW(),
              itemsProcessed = ?
          WHERE status = 'running'
          ORDER BY startedAt DESC
          LIMIT 1
        `, [data.itemsCount || 0]);
      } else if (status === 'failed') {
        await connection.execute(`
          UPDATE cron_logs
          SET status = 'failed',
              completedAt = NOW(),
              error = ?
          WHERE status = 'running'
          ORDER BY startedAt DESC
          LIMIT 1
        `, [data.error || 'Unknown error']);
      }

      connection.release();
    } catch (error) {
      console.error('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ cron:', error.message);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
   */
  updateNextRun(cronExpression = null) {
    let hours, minutes;

    if (!cronExpression) {
      const time = process.env.PARSER_TIME || '00:00';
      const [h, m] = time.split(':');
      hours = h;
      minutes = m;
      cronExpression = `${minutes} ${hours} * * *`;
    } else {
      // –ü–∞—Ä—Å–∏–º cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (format: "MM HH * * *")
      const parts = cronExpression.split(' ');
      minutes = parseInt(parts[0]);
      hours = parseInt(parts[1]);
    }

    const now = new Date();
    let next = new Date(now);
    next.setHours(parseInt(hours), parseInt(minutes), 0, 0);

    if (next <= now) {
      next.setDate(next.getDate() + 1);
    }

    this.nextRun = next;
    console.log(`üìÖ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: ${next.toLocaleString('ru-RU')}`);
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
   */
  stop() {
    if (this.job) {
      this.job.stop();
      this.job = null;
      console.log('‚èπÔ∏è  –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
   */
  getStatus() {
    return {
      isRunning: this.isRunning,
      lastRun: this.lastRun,
      nextRun: this.nextRun,
      isActive: this.job ? !this.job.stopped : false
    };
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ (–Ω–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)
   */
  async runManually() {
    console.log('\nüöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö –ü–ê–†–°–ò–ù–ì–ê');
    await this.executeParsingTask();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
let schedulerInstance = null;

async function getScheduler() {
  if (!schedulerInstance) {
    schedulerInstance = new ParsingScheduler();
    await schedulerInstance.initialize();
  }
  return schedulerInstance;
}

module.exports = {
  ParsingScheduler,
  getScheduler
};
