/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª–∞ –≤ PostgreSQL –ë–î
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞–ø–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ .env
 */

const fs = require('fs');
const path = require('path');
const { Pool } = require('pg');
require('dotenv').config();

// –ö–æ–Ω—Ñ–∏–≥ –ë–î - —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Amvera
const dbConfig = {
  host: 'autonomera-alex1976.db-msk0.amvera.tech',
  port: 5432,
  user: 'parser_user',
  password: 'Qwerty12345',
  database: 'autonomera777',
  ssl: { rejectUnauthorized: false }
};

console.log(`‚úì –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫: ${dbConfig.host}:${dbConfig.port}/${dbConfig.database}`);

const pool = new Pool(dbConfig);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV
function parseCSV(filePath) {
  const content = fs.readFileSync(filePath, 'utf-8');
  const lines = content.split('\n').map(line => line.trim()).filter(line => line);

  const headers = lines[0].split(';');
  console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ CSV:', headers);

  const rows = [];
  for (let i = 1; i < lines.length; i++) {
    const values = lines[i].split(';');
    const row = {};
    headers.forEach((header, index) => {
      row[header.trim()] = values[index] ? values[index].trim() : null;
    });
    rows.push(row);
  }

  return rows;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
async function loadCSV() {
  const client = await pool.connect();

  try {
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ë–î');

    // –ß–∏—Ç–∞–µ–º CSV
    const csvFile = 'C:\\Users\\cobra\\Desktop\\autonomera777_2025-10-26.csv';
    console.log(`üìÅ –ß–∏—Ç–∞—é —Ñ–∞–π–ª: ${csvFile}`);

    const rows = parseCSV(csvFile);
    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${rows.length} —Å—Ç—Ä–æ–∫ –∏–∑ CSV`);

    if (rows.length === 0) {
      console.log('‚ùå CSV —Ñ–∞–π–ª –ø—É—Å—Ç!');
      return;
    }

    // –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await client.query('BEGIN');

    let insertCount = 0;
    let errorCount = 0;

    // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];

      try {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const nomer = row['–ù–æ–º–µ—Ä'] || null;
        const price = row['–¶–µ–Ω–∞'] ? parseInt(row['–¶–µ–Ω–∞']) : null;
        const date_posted = row['–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è'] ? convertDate(row['–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è']) : null;
        const date_updated = row['–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'] ? convertDate(row['–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è']) : null;
        const status = row['–°—Ç–∞—Ç—É—Å'] || null;
        const region = row['–†–µ–≥–∏–æ–Ω'] ? parseInt(row['–†–µ–≥–∏–æ–Ω']) : null;
        const url = row['URL'] || null;
        const loaded_at = new Date().toISOString();

        const query = `
          INSERT INTO listings (
            nomer, price, date_posted, date_updated, status, region, url, loaded_at, updated_at, parsed_at
          ) VALUES (
            $1, $2, $3, $4, $5, $6, $7, $8, NOW(), NOW()
          )
        `;

        await client.query(query, [nomer, price, date_posted, date_updated, status, region, url, loaded_at]);
        insertCount++;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –∑–∞–ø–∏—Å–µ–π
        if ((i + 1) % 100 === 0) {
          console.log(`‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${i + 1}/${rows.length} –∑–∞–ø–∏—Å–µ–π...`);
        }
      } catch (error) {
        errorCount++;
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}:`, error.message);
      }
    }

    // –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await client.query('COMMIT');

    console.log(`\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
    console.log(`   - –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${rows.length}`);
    console.log(`   - –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${insertCount}`);
    console.log(`   - –û—à–∏–±–æ–∫: ${errorCount}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const result = await client.query('SELECT COUNT(*) as total FROM listings');
    console.log(`   - –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: ${result.rows[0].total}`);

  } catch (error) {
    await client.query('ROLLBACK');
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  } finally {
    client.release();
    await pool.end();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏–∑ DD.MM.YYYY –≤ YYYY-MM-DD
function convertDate(dateStr) {
  if (!dateStr) return null;
  const parts = dateStr.split('.');
  if (parts.length !== 3) return null;
  const [day, month, year] = parts;
  return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
}

// –ó–∞–ø—É—Å–∫
console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É CSV –≤ PostgreSQL...\n');
loadCSV().catch(error => {
  console.error('Fatal error:', error);
  process.exit(1);
});
