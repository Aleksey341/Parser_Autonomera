/**
 * –¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
 */

const { Pool } = require('pg');
require('dotenv').config();

const dbConfig = {
  host: 'autonomera-alex1976.db-msk0.amvera.tech',
  port: 5432,
  user: 'parser_user',
  password: 'Qwerty12345',
  database: 'autonomera777',
  ssl: { rejectUnauthorized: false }
};

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...\n');

const pool = new Pool(dbConfig);

async function testAPIs() {
  const client = await pool.connect();

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ
    console.log('üìä –¢–µ—Å—Ç 1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ listings');
    const countResult = await client.query('SELECT COUNT(*) as total FROM listings');
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${countResult.rows[0].total}\n`);

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å getListingsStats
    console.log('üìä –¢–µ—Å—Ç 2: getListingsStats()');
    const statsResult = await client.query(`
      SELECT
        COUNT(*) as total,
        COUNT(DISTINCT region) as regions_count,
        ROUND(AVG(price))::bigint as avg_price,
        MIN(price)::bigint as min_price,
        MAX(price)::bigint as max_price,
        DATE(MAX(updated_at)) as last_update
      FROM listings
      WHERE price IS NOT NULL
    `);
    console.log('   –†–µ–∑—É–ª—å—Ç–∞—Ç stats:');
    console.log('  ', JSON.stringify(statsResult.rows[0], null, 2));

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å getListingsWithHistory
    console.log('\nüìä –¢–µ—Å—Ç 3: getListingsWithHistory (–ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π)');
    const dataResult = await client.query(`
      SELECT
        l.id,
        l.nomer,
        l.price,
        l.region,
        l.status,
        l.date_created,
        l.date_updated,
        l.url,
        l.parsed_at,
        l.updated_at,
        (
          SELECT json_build_object(
            'price_delta', lh.price_delta,
            'date_updated_site', lh.date_updated_site,
            'recorded_at', lh.recorded_at,
            'is_price_changed', lh.is_price_changed
          )
          FROM listing_history lh
          WHERE lh.nomer = l.nomer
          ORDER BY lh.recorded_at DESC
          LIMIT 1
        ) as last_change
      FROM listings l
      WHERE 1=1
      ORDER BY l.date_updated DESC NULLS LAST
      LIMIT 5
    `);
    console.log(`   –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${dataResult.rows.length}`);
    if (dataResult.rows.length > 0) {
      console.log('   –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å:');
      console.log('  ', JSON.stringify(dataResult.rows[0], null, 2));
    }

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å /api/db/regions –∑–∞–ø—Ä–æ—Å
    console.log('\nüìä –¢–µ—Å—Ç 4: /api/db/regions');
    const regionsResult = await client.query(`
      SELECT
        COALESCE(region, 0)::text as region,
        COUNT(*) as count,
        ROUND(AVG(price))::bigint as avg_price,
        MIN(price)::bigint as min_price,
        MAX(price)::bigint as max_price
      FROM listings
      WHERE price IS NOT NULL
      GROUP BY region
      HAVING COUNT(*) > 0
      ORDER BY COUNT(*) DESC
      LIMIT 10
    `);
    console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: ${regionsResult.rows.length}`);
    if (regionsResult.rows.length > 0) {
      console.log('   –ü–µ—Ä–≤—ã–µ 3 —Ä–µ–≥–∏–æ–Ω–∞:');
      console.log('  ', JSON.stringify(regionsResult.rows.slice(0, 3), null, 2));
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    client.release();
    await pool.end();
  }
}

testAPIs();
